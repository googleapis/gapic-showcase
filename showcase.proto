// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/api/annotations.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

package google.showcase.v1alpha1;

option (google.api.metadata) = {
  product_name: "GAPIC Showcase"
  product_uri: "https://github.com/googleapis/gapic-showcase"
};

// A service to showcase Generated API Client features and common API patterns
// used by Google.
service Showcase {
  // This service is meant to only run locally on the port 7469 (keypad digits
  // for "show").
  option (google.api.default_host) = "localhost:7469";

  // A method used to show unary methods. This method will return the message
  // that was given.
  rpc Echo(EchoRequest) returns (EchoResponse) {}

  // A method used to show server-side streaming methods. This method will
  // split the given content into words and will pass each word back through
  // the stream.
  rpc Expand(ExpandRequest) returns (stream EchoResponse) {
    option (google.api.method_signature) = {
      fields: ["content", "error"]
    };
  }

  // A method used to show client-side streaming methods. This method will
  // collect the contents given to it. When the stream is closed by the client,
  // this method will return the a concatenation of the strings passed to it.
  rpc Collect(stream EchoRequest) returns (EchoResponse) {}

  // A method that will be used to show bidirectional streaming methods. Upon
  // receiving a request on the stream, the same content will be passed back
  // on the stream.

  rpc Chat(stream EchoRequest) returns (stream EchoResponse);

  // This method is to show how a client handles a request timing out. The
  // server will wait the requested amount of response_delay and then return
  // the response specified in the request.
  rpc Timeout(TimeoutRequest) returns (TimeoutResponse) {}

  // This method is used to setup the Retry method. The given list of retry behavior
  // will be bound to an ID defined by the server. Subsequent Retry requests
  // of the given ID will respond with the behavior specified in this request.
  rpc SetupRetry(SetupRetryRequest) returns (RetryId) {
    option (google.api.method_signature) = {
      fields: ["responses"]
    };
  }

  // This method is used to show how a client handles errors that can be
  // retried. Requests to a given RetryId will respond in the way specified
  // in SetupRetry method.
  rpc Attempt(RetryId) returns (google.protobuf.Empty) {
    option (google.api.method_signature) = {
      fields: ["id"]
    };
  }

  // This method is used to show how a client handles a long running operation.
  // Upon receiving a request, the server will create a new ID and mark that
  // the ID created will complete at the time denoted in the request. If the
  // completion time has already passed, the server will return a longrunning
  // operation that signifies a completed operation. Upon subsequent requests
  // to the operations mixin service, if the operation is incomplete, the
  // the server will return metadata denoting the percent that the operation
  // is complete, else the server will return a completed operation that will
  // either denote that the operation has succeeded or failed.
  rpc Longrunning(LongrunningRequest) returns (google.longrunning.Operation) {
    option (google.longrunning.operation_types) = {
      response: "google.showcase.v1alpha1.LongrunningResponse"
      metadata: "google.showcase.v1alpha1.LongrunningMetadata"
    };
  }

  // This method is used to show how a client will handle a method that lists
  // responses in a paginated method. The request will specify an ID and the
  // maximum number of responses to return. If the ID has not been seen before
  // the server will mark the ID specified and the maximum number to be
  // returned. The page token will be a stringified integer denoting the
  // the number to start the page at.
  rpc Pagination(PaginationRequest) returns (PaginationResponse) {
    option (google.api.method_signature) = {
      fields: ["max_response", "page_size_override"]
    };
  }

  // This method is used to show how a client will handle configuration to
  // flatten a request. The server will simply echo the request and
  rpc ParameterFlattening(ParameterFlatteningMessage) returns (ParameterFlatteningMessage) {
    option (google.api.method_signature) = {
      fields: ["content", "repeated_content", "nested"]
    };
  }

  // This method is used to show how a client will handle request strings that
  // are configured to follow a certain pattern. The server
  // will simply echo the request.
  rpc ResourceName(ResourceNameMessage) returns (ResourceNameMessage) {
    option (google.api.method_signature) = {
      fields: ["name"]
    };
  }


  // This method is used to show how a client will handle request strings that
  // are configured to follow a certain set of patterns. The server
  // will simply echo the request.
  rpc ResourceSet(ResourceSetMessage) returns (ResourceSetMessage) {
    option (google.api.method_signature) = {
      fields: ["name"]
    };
  }
}

// The request message used for the Echo, Collect and Chat methods. If content
// is set in this message then the request will succeed. If a status is
message EchoRequest {
  oneof response {
    // The content to be echoed by the server.
    string content = 1;

    // The error to be thrown by the server.
    google.rpc.Status error = 2;
  }
}

// The response message for the EchoService methods.
message EchoResponse {
  // The content specified in the request.
  string content = 1;
}

// The request message for the Expand method.
message ExpandRequest {
  // The content that will be split into words and returned on the stream.
  string content = 1;

  // The error that is thrown after all words are sent on the stream.
  google.rpc.Status error = 2;
}

// The request for Showcase Timeout method.
message TimeoutRequest {
  // The amount of time to wait before returning a response.
  google.protobuf.Duration response_delay = 1 [(google.api.required) = true];

  oneof response {
    // The error that will be returned by the server. If this code is specified
    // to be the OK rpc code, an empty response will be returned.
    google.rpc.Status error = 2;

    // The response to be returned that will signify successful method call.
    TimeoutResponse success = 3;
  }
}

// The response for Showcase Timeout method.
message TimeoutResponse {
  // This content can contain anything, the server will not depend on a value
  // here.
  string content = 1;
}

// The request for the Showcase SetupRetry method.
message SetupRetryRequest {
  // The server will respond in the order that is given in this field.
  repeated google.rpc.Status responses = 1 [(google.api.required) = true];
}

// The ID which a given list of responses will be bound to.
message RetryId {
  // An ID which will the given list of responses will be bound to on the
  // server.
  string id = 1 [(google.api.required) = true];
}

// The request for the Showcase Longrunning method.
message LongrunningRequest {
  // The time after which this operation will succeed. If, upon the first,
  // the time has passed, the initial response will return a completed
  // operation.
  google.protobuf.Timestamp completion_time = 1 [(google.api.required) = true];

  oneof response {
    // The error that will be returned in the operation signifying a failed
    // operation. If the OK rpc status code is returned, the operation will
    // succeed with an empty operation.
    google.rpc.Status error = 2;

    // The response that will be returned upon operation success.
    LongrunningResponse success = 3;
  }
}

// The metadata for the Showcase Longrunning method.
message LongrunningMetadata {
  // The amount of time remaining on this operation.
  google.protobuf.Duration time_remaining = 1;
}


// The final operation response for the Showcase Longrunning
// method.
message LongrunningResponse {
  // The response that will be returned for a successful operation.
  string content = 1;
}

// The request for the Showcase Pagination.
message PaginationRequest {
  // The maximum number that will be returned in the response.
  int32 max_response = 1 [(google.api.required) = true];

  // The amount of numbers to returned in the response.
  int32 page_size = 2;

  // The position of the page to be returned. This will be a stringified int
  // that will signifiy where to start the page from. Anything other than
  // a stringified integer within the range of 0 and the max_response will
  // cause an error to be thrown. This value is a string as opposed to a int32
  // to follow general google api practices.
  string page_token = 3;

  // This field is used to show the client's ability to handle servers that
  // return a page that is larger the specified page size.
  int32 page_size_override = 4;
}

// The response for the Showcase Pagination method.
message PaginationResponse {
  // An increasing list of responses starting at the value specified by the
  // page token. If the page token is empty, then this list will start at 0.
  repeated int32 responses = 1;

  // The next integer stringified.
  string next_page_token = 2;
}

// The request and response message for the Showcase ParameterFlattening.
message ParameterFlatteningMessage {
  // Simply a string for content.
  string content = 1;

  // A list of strings to show how flattening affects repeated fields.
  repeated string repeated_content = 2;

  // A message to show flattenings that cause a message type to become a param.
  ParameterFlatteningMessage nested = 3;
}

// The request and response message for the Showcase ResourceName method.
message ResourceNameMessage {
  // This field will have a single template bound to it.
  string name = 1 [
    (google.api.resource).path = "projects/*/resources/*",
    (google.api.required) = true
  ];
}

// The request and response message for the Shwocase ResourceSet method.
message ResourceSetMessage {
  // This field will be a oneof resource name with many templates bound to it.
  string name = 1 [
    (google.api.resource_set) = {
      base_name: "Resource"
      resources: [
        {base_name: "GlobalResource", path: "global/projects/*/resources/*"},
        {base_name: "RegionalResource", path: "regional/projects/*/resources/*"}]
    },
    (google.api.required) = true
  ];
}
