version: 2
workflows:
  version: 2
  main:
    jobs:
      - build:
          filters: &all_commits
            tags:
              only: /.*/
      - test:
          requires:
            - build
          filters: *all_commits
      - typescript-smoke-test:
          filters: *all_commits
      # TODO(dovs): https://github.com/googleapis/gapic-showcase/issues/382
      # - python-smoke-test:
      #     filters: *all_commits
      - protobufjs-load-test:
          filters: *all_commits
      - push-generated-source:
          requires:
            - test
          filters:
            branches:
              only: master
      - github_release:
          requires:
            - test
            - typescript-smoke-test
            # TODO(dovs): https://github.com/googleapis/gapic-showcase/issues/382
            # - python-smoke-test
            - protobufjs-load-test
          filters: &releases
            branches:
              ignore: /.*/
            tags:
              only: '/^v[\d.]+$/'
      - push-image:
          requires:
            - test
            - typescript-smoke-test
            # TODO(dovs): https://github.com/googleapis/gapic-showcase/issues/382
            # - python-smoke-test
            - protobufjs-load-test
          filters: *releases

jobs:
  build:
    docker:
      - image: golang:1.13
    working_directory: /go/src/github.com/googleapis/gapic-showcase
    environment:
      GO111MODULE: "on"
    steps:
      - checkout
      - run:
          name: Get proto dependencies
          command: git submodule init && git submodule update
      - run:
          name: Install protoc
          command: |
            apt-get update && apt-get install -y unzip
            curl -o ~/protoc3.zip -L https://github.com/protocolbuffers/protobuf/releases/download/v3.12.0/protoc-3.12.0-linux-x86_64.zip
            unzip ~/protoc3.zip -d ~/protoc3
            mv ~/protoc3/bin/* /usr/local/bin/
            mv ~/protoc3/include/* /usr/local/include/
      - run:
          name: Install generators
          command: |
              go mod download
              go install github.com/golang/protobuf/protoc-gen-go
              go get github.com/googleapis/gapic-generator-go/cmd/protoc-gen-go_cli
              go get github.com/googleapis/gapic-generator-go/cmd/protoc-gen-go_gapic
      - run:
          name: Compile protos
          command: go run ./util/cmd/compile_protos
      - persist_to_workspace:
          root: /go
          paths:
            - src/github.com/googleapis/gapic-showcase

  test:
    docker:
      - image: golang:1.13
    environment:
      GO111MODULE: "on"
    working_directory: /go/src/github.com/googleapis/gapic-showcase
    steps:
      - attach_workspace:
          at: /go
      - run:
          name: Check if we are using generated source.
          command: git diff --exit-code cmd client server/genproto || echo 'export DIFF_FOUND="true"' >> $BASH_ENV
      - run:
          name: Check formatting
          command: "! gofmt -l ./ 2>&1 | read"
      - run:
          name: Lint code
          command: "! go lint ./... 2>&1 | read"
      - run:
          name: Examine and report suspicious constructs
          command: "! go tool vet ./ 2>&1 | read"
      - run:
          name: Retrieve dependencies
          command: go mod download
      - run:
          name: Install gapic-showcase CLI
          command: go install ./cmd/gapic-showcase
      - run:
          name: Run tests
          command: |
            go test ./server/... -coverprofile=coverage.txt -covermode=atomic
            go test ./client # Don't run coverage for generated tests.
      - run:
          name: Spin up showcase.
          command: gapic-showcase run
          background: true
      - run:
          name: Sanity check.
          command: gapic-showcase echo echo --response content --response.content "hello!"
      - run:
          name: Submit coverage data to codecov.
          command: bash <(curl -s https://codecov.io/bash)
          when: always
      - run:
          name: Print instructions on regeneration failure.
          command: |
            # Exit early if no diff was found
            [[ ! -z ${DIFF_FOUND} ]] || exit 0
            echo "Regenerating generated source probably caused the build to break, please run 'go run ./util/compile_protos' and fix the build."
          when: on_fail

  push-generated-source:
    docker:
      - image: golang:1.13
    environment:
      GO111MODULE: "on"
    working_directory: /go/src/github.com/googleapis/gapic-showcase
    steps:
      - attach_workspace:
          at: /go
      - run:
          name: Check if we are using generated source.
          command: git diff --exit-code cmd client server/genproto || echo 'export DIFF_FOUND="true"' >> $BASH_ENV
      - run:
          name: Create pull request if diff is found.
          command: |
            # Exit early if no diff was found
            [[ ! -z ${DIFF_FOUND} ]] || exit 0
            # Run go mod tidy to clean up added generation dependencies
            go mod tidy
            # Setup git config.
            git config credential.helper 'cache --timeout=120'
            git config user.email "googleapis-publisher@google.com"
            git config user.name "googleapis-publisher"
            # Push changes to branch.
            export BRANCH="build-$(date +%Y%m%d%H%M%S)"
            git checkout -b ${BRANCH}
            git add .
            git commit -m "Regenerate cmd, client, and server directories."
            git push --quiet https://${GITHUB_TOKEN}@github.com/googleapis/gapic-showcase.git ${BRANCH}
            # Create a PR with hub.
            go get github.com/github/hub
            hub pull-request \
              --message "Regenerate cmd, client, and server directories." \
              --base googleapis:master \
              --head googleapis:${BRANCH} \
              --assign noahdietz,alexander-fenster

  kotlin-smoke-test:
    machine: true
    steps:
      - checkout
      - run:
          name: Stage showcase in proto dependencies
          command: |
              git clone https://github.com/googleapis/api-common-protos.git
              mkdir -p api-common-protos/google/showcase/v1beta1/
              cp schema/google/showcase/v1beta1/* api-common-protos/google/showcase/v1beta1/
      - run:
          name: Run kotlin generation
          command: |
            mkdir koutput
            docker run --rm \
              --mount type=bind,source="$(pwd)"/api-common-protos,target=/proto \
              --mount type=bind,source="$(pwd)"/koutput,target=/generated \
              gcr.io/gapic-images/gapic-generator-kotlin:0.6.0

  typescript-smoke-test:
    machine: true
    steps:
      - checkout
      - run:
          name: Stage showcase in proto dependencies
          command: |
              git clone https://github.com/googleapis/api-common-protos.git
              mkdir -p api-common-protos/google/showcase/v1beta1/
              cp schema/google/showcase/v1beta1/* api-common-protos/google/showcase/v1beta1/
      - run:
          name: Run TypeScript generation
          command: |
            mkdir tsout
            docker run --rm --user $UID \
              --mount type=bind,source="$(pwd)"/schema,destination=/in/protos/google/showcase/v1beta1,readonly \
              --mount type=bind,source="$(pwd)"/tsout,destination=/out/ \
              gcr.io/gapic-images/gapic-generator-typescript:latest  # it doesn't have versioning yet
      - run:
          name: Run auto-generated tests
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
            . "$NVM_DIR/nvm.sh"
            nvm install 12
            nvm use 12 # use Node.js v12
            cd tsout
            npm install
            npm test
            npm run system-test
          environment:
            NVM_DIR: /opt/circleci/.nvm

  python-smoke-test:
    machine: true
    steps:
      - checkout
      - run:
          name: Run python generation
          command: |
            mkdir pyout
            docker run --rm --user $UID \
              --mount type=bind,source="$(pwd)"/schema/,destination=/in/google/showcase/v1beta1/,readonly \
              --mount type=bind,source="$(pwd)"/pyout,target=/out \
              gcr.io/gapic-images/gapic-generator-python:0.9

  protobufjs-load-test:
    docker:
      - image: node:12
    steps:
      - checkout
      - run:
          name: Install protobuf loader
          command: |
            npm install google-proto-files
      - run:
          name: Check if protos can be loaded by protobufjs
          command: |
            node -e "require('google-proto-files').loadSync('schema/google/showcase/v1beta1/echo.proto');"
            node -e "require('google-proto-files').loadSync('schema/google/showcase/v1beta1/identity.proto');"
            node -e "require('google-proto-files').loadSync('schema/google/showcase/v1beta1/messaging.proto');"
            node -e "require('google-proto-files').loadSync('schema/google/showcase/v1beta1/testing.proto');"

  github_release:
    docker:
      - image: golang:1.13
    environment:
      GOPATH: /go
      GO111MODULE: "on"
    working_directory: /go/src/github.com/googleapis/gapic-showcase
    steps:
      - checkout
      - run:
          name: Update git submodules.
          command: git submodule update --init
      - run:
          name: Retrieve dependencies
          command: go mod download
      - run:
          name: Install protoc
          command: |
            apt-get update && apt-get install -y unzip
            curl -o ~/protoc3.zip -L https://github.com/protocolbuffers/protobuf/releases/download/v3.12.0/protoc-3.12.0-linux-x86_64.zip
            unzip ~/protoc3.zip -d ~/protoc3
            mv ~/protoc3/bin/* /usr/local/bin/
            mv ~/protoc3/include/* /usr/local/include/
      - run:
          name: Create release assets
          command: go run util/cmd/release/main.go
      - run:
          name: Attach compiled stuff to the tag.
          command: |
            go get github.com/tcnksm/ghr
            ghr -t ${GITHUB_TOKEN} \
                -u googleapis \
                -r gapic-showcase \
                -c ${CIRCLE_SHA1} \
                -b "$(go run ./util/cmd/print_changes/main.go ${CIRCLE_TAG})" \
                -prerelease \
                ${CIRCLE_TAG} ./dist

  push-image:
    machine: true
    steps:
      - checkout
      - run:
          name: Setup Auth
          command: |
            echo ${GCLOUD_SERVICE_KEY} > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Parse version tag
          command: echo "export VERSION=${CIRCLE_TAG#v}" >> $BASH_ENV
      - run:
          name: Build docker image
          command: docker build -t gcr.io/${GOOGLE_PROJECT_ID}/gapic-showcase .
      - run:
          name: Tag image
          command: docker tag gcr.io/${GOOGLE_PROJECT_ID}/gapic-showcase gcr.io/${GOOGLE_PROJECT_ID}/gapic-showcase:${VERSION}
      - run:
          name: Push image
          command: |
            gcloud docker -- push gcr.io/${GOOGLE_PROJECT_ID}/gapic-showcase:latest
            gcloud docker -- push gcr.io/${GOOGLE_PROJECT_ID}/gapic-showcase:${VERSION}
