version: 2
workflows:
  version: 2
  main:
    jobs:
      - build
      - release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
jobs:
  build:
    docker:
      - image: golang:1.10
    environment:
      GOPATH: /go
    working_directory: /go/src/github.com/googleapis/gapic-showcase
    steps:
      - checkout
      - run:
          name: Check formatting
          command: "! gofmt -l ./ 2>&1 | read"
      - run:
          name: Lint code
          command: "! go lint ./... 2>&1 | read"
      - run:
          name: Examine and report suspicious constructs
          command: "! go tool vet ./ 2>&1 | read"
      - run:
          name: Install dependencies
          command: go get -v -t -d ./server/... && go get -v -t -d ./cmd/...
      - run:
          name: Run tests
          command: go test ./... -coverprofile=coverage.txt -covermode=atomic
      - run:
          name: Submit coverage data to codecov.
          command: bash <(curl -s https://codecov.io/bash)
          when: always

  release:
    docker:
      - image: golang:1.10
    environment:
      GOPATH: /go
    working_directory: /go/src/github.com/googleapis/gapic-showcase
    steps:
      - checkout
      - run:
          # TODO(landrito): This can be cached.
          name: Install server dependencies
          command: go get -v -t -d ./cmd/...
      - run:
          name: Install tools
          command: |
            go get github.com/mitchellh/gox
            go get github.com/tcnksm/ghr
            apt-get update && apt-get install -y unzip
      - run:
          name: Cross compile the server binary
            # TODO(landrito): Figure out a way to get the version from the tag.
          command: |
            VERSION=$(go run cmd/server/main.go version)
            gox -os="windows linux" -arch="amd64 arm" -output \
                "dist/gapic-showcase-v1alpha2-${VERSION}-{{.OS}}-{{.Arch}}" \
                github.com/googleapis/gapic-showcase/cmd/server
            gox -os="darwin" -arch="amd64" -output \
                "dist/gapic-showcase-v1alpha2-${VERSION}-{{.OS}}-{{.Arch}}" \
                github.com/googleapis/gapic-showcase/cmd/server
      - run:
          name: Install protoc
          command: |
            curl -o ~/protoc3.zip -L https://github.com/google/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip
            unzip ~/protoc3.zip -d ~/protoc3
            mv ~/protoc3/bin/* /usr/local/bin/
            mv ~/protoc3/include/* /usr/local/include/
      - run:
          name: Get proto dependencies.
          command: |
            git clone -b input-contract \
                https://github.com/googleapis/api-common-protos.git \
                tmp/api-common-protos
      - run:
          name: Stage the showcase protos with it's dependencies.
          command: |
            mkdir -p tmp/api-common-protos/google/showcase/v1alpha2
            cp schema/echo.proto tmp/api-common-protos/google/showcase/v1alpha2/
      - run:
          name: Compile the proto descriptor set.
          command: |
            VERSION=$(go run cmd/server/main.go version)
            protoc --proto_path=tmp/api-common-protos --include_imports \
                --include_source_info \
                -o dist/gapic-showcase-v1alpha2-${VERSION}.desc \
                tmp/api-common-protos/google/showcase/v1alpha2/echo.proto
      - run:
          name: Make a tarball of the protos.
          command: |
            VERSION=$(go run cmd/server/main.go version)
            mkdir tmp/gapic-showcase-v1alpha2-${VERSION}-protos
            cp -rv tmp/api-common-protos/google tmp/gapic-showcase-v1alpha2-${VERSION}-protos
            cd tmp/ && tar -zcvf ../dist/gapic-showcase-v1alpha2-${VERSION}-protos.tar.gz gapic-showcase-v1alpha2-${VERSION}-protos
      - run:
          name: Attach compiled stuff to the tag.
          command: |
            VERSION=$(go run cmd/server/main.go version)
            ghr -t ${GITHUB_TOKEN} \
                -u ${CIRCLE_PROJECT_USERNAME} \
                -r ${CIRCLE_PROJECT_REPONAME} \
                -c ${CIRCLE_SHA1} v${VERSION} ./dist/
