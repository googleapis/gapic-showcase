// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

package google.showcase.v1alpha3;

option go_package = "github.com/googleapis/gapic-showcase/server/genproto";
option java_package = "com.google.showcase.v1alpha3";
option java_multiple_files = true;

option (google.api.metadata) = {
  product_uri: "https://github.com/googleapis/gapic-showcase"
};

service Identity {
  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1alpha3/users"
      body: "*"
    };
    option (google.api.method_signature) = {
      fields: ["user.username", "user.email"]
    };
  }

  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1alpha3/{name=users/*}"
    };
    option (google.api.method_signature) = {
      fields: ["name"]
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/v1alpha3/{user.name=users/*}"
      body: "*"
    };
  }

  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha3/{name=users/*}"
    };
    option (google.api.method_signature) = {
      fields: ["name"]
    };
  }

  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1alpha3/users"
    };
  }
}

message User {
  string name = 1 [(google.api.resource).path = "users/{user_id}"];

  string username = 2 [(google.api.field_behavior) = REQUIRED];

  string email = 3 [(google.api.field_behavior) = REQUIRED];

  google.protobuf.Timestamp create_time = 4;

  google.protobuf.Timestamp update_time = 5;
}

message CreateUserRequest {
  User user = 1;
}

message GetUserRequest {
  string name = 1 [
    (google.api.resource_type) = "google.showcase.v1alpha3.User",
    (google.api.field_behavior) = REQUIRED
  ];
}

message UpdateUserRequest {
  User user = 1;

  google.protobuf.FieldMask update_mask = 2;
}

message DeleteUserRequest {
  string name = 1 [
    (google.api.resource_type) = "google.showcase.v1alpha3.User",
    (google.api.field_behavior) = REQUIRED
  ];
}

message ListUsersRequest {
  int32 page_size = 1;

  string page_token = 2;
}

message ListUsersResponse {
  repeated User users = 1;

  string next_page_token = 2;
}
