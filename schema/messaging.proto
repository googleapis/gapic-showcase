// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/api/annotations.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/error_details.proto";

package google.showcase.v1alpha3;

option go_package = "github.com/googleapis/gapic-showcase/server/genproto";
option java_package = "com.google.showcase.v1alpha3";
option java_multiple_files = true;

option (google.api.metadata) = {
  product_uri: "https://github.com/googleapis/gapic-showcase"
};

// This resource is defined in google/showcase/v1alpha3/user.proto. Since
// google/showcase/v1alpha3/user.proto is not imported from this file, the
// resource needs to be defined here to be used in this API.
option (google.api.resource_definition) = {
  name: "User",
  path: "users/{user_id}"
};

// A simple messaging service that implements chat rooms and profile posts.
//
// This messaging service showcases the features that API clients
// generated by gapic-generators implement.
service Messaging {
  // Creates a room.
  rpc CreateRoom(CreateRoomRequest) returns (Room) {
    option (google.api.http) = {
      post: "/v1alpha3/rooms"
      body: "*"
    };
    option (google.api.method_signature) = {
      fields: ["room.display_name", "room.description"]
    };
  }

  // Retrieves the Room with the given URI.
  rpc GetRoom(GetRoomRequest) returns (Room) {
    option (google.api.http) = {
      get: "/v1alpha3/{name=rooms/*}"
    };
    option (google.api.method_signature) = {
      fields: ["name"]
    };
  }

  // Updates a room.
  rpc UpdateRoom(UpdateRoomRequest) returns (Room) {
    option (google.api.http) = {
      patch: "/v1alpha3/{room.name=rooms/*}"
      body: "*"
    };
  }

  // Deletes a room and all of its messages.
  rpc DeleteRoom(DeleteRoomRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha3/{name=rooms/*}"
    };
    option (google.api.method_signature) = {
      fields: ["name"]
    };
  }

  // Lists all chat rooms.
  rpc ListRooms(ListRoomsRequest) returns (ListRoomsResponse) {
    option (google.api.http) = {
      get: "/v1alpha3/rooms"
    };
  }

  // Creates a message. If the parent field corresponds to a RoomMessage
  // resource, the message is understood to be a message in a chatroom. If the
  // parent field is a ProfileMessage resource name, the message is understood
  // to be a post on a user profile.
  rpc CreateMessage(CreateMessageRequest) returns (Message) {
    option (google.api.http) = {
      post: "/v1alpha3/{parent=rooms/*}/messages"
      body: "*"
      additional_bindings: {
        post: "v1alpha3/{parent=users/*/profile}/messages"
        body: "*"
      }
    };
    option (google.api.method_signature) = {
      fields: ["parent", "message.text", "message.author"]
    };
    option (google.api.method_signature) = {
      fields: ["parent", "message.image", "message.author"]
    };
  }

  // Retrieves the Message with the given URI.
  rpc GetMessage(GetMessageRequest) returns (Message) {
    option (google.api.http) = {
      get: "/v1alpha3/{name=rooms/*/messages/*}"
      additional_bindings: {
        get: "v1alpha3/{name=users/*/profile/messages/*}"
      }
    };
    option (google.api.method_signature) = {
      fields: ["name"]
    };
  }

  // Updates a message.
  rpc UpdateMessage(UpdateMessageRequest) returns (Message) {
    option (google.api.http) = {
      patch: "/v1alpha3/{message.name=rooms/*/messages/*}"
      body: "*"
      additional_bindings: {
        patch: "v1alpha3/{message.name=users/*/profile/messages/*}"
        body: "*"
      }
    };
  }

  // Deletes a message.
  rpc DeleteMessage(DeleteMessageRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha3/{name=rooms/*/messages/*}"
      additional_bindings: {
        delete: "v1alpha3/{name=users/*/profile/messages/*}"
      }
    };
    option (google.api.method_signature) = {
      fields: ["name"]
    };
  }

  // Lists messages for a specific chat room or user profile depending on the
  // parent URI.
  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse) {
    option (google.api.http) = {
      get: "/v1alpha3/{parent=rooms/*}/messages"
      additional_bindings: {
        get: "v1alpha3/{parent=users/*/profile}/messages}"
      }
    };
    option (google.api.method_signature) = {
      fields: ["parent"]
    };
  }

  // This method searches through all messages across all rooms and profiles
  // for messages containing to words found in the query. Only posts that
  // contain an exact match of a queried word will be returned.
  rpc SearchMessages(SearchMessagesRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha3/rooms/-/messages:search"
      body: "*"
    };
    option (google.api.operation) = {
      response_type: "google.showcase.v1alpha3.SearchMessagesResponse"
      metadata_type: "google.showcase.v1alpha3.SearchMessagesMetadata"
    };
    option (google.api.method_signature) = {
      fields: ["query"]
    };
  }

  // This returns a stream that emits the messages that are created for a
  // particular chat room or user profile.
  rpc StreamMessages(StreamMessagesRequest) returns (stream Message) {
    option (google.api.http) = {
      post: "/v1alpha3/{name=rooms/*}/messages:stream"
      body: "*"
      additional_bindings: {
        post: "v1alpha3/{parent=users/*/profile}/messages:stream"
        body: "*"
      }
    };
  }

  // This is a stream to create multiple messages. If an invalid message is
  // requested to be created, the stream will close with an error.
  rpc SendMessages(stream CreateMessageRequest) returns (SendMessagesResponse) {
    option (google.api.http) = {
      post: "/v1alpha3/{parent=rooms/*}/messages:send"
      body: "*"
      additional_bindings: {
        post: "v1alpha3/{parent=users/*/profile}/messages:send"
        body: "*"
      }
    };
  }

  // This method starts a bidirectional stream that receives all messages that
  // are being created after the stream has started and sends requests to create
  // messages. If an invalid message is requested to be created, the stream will
  // close with an error.
  rpc Connect(stream CreateMessageRequest) returns (stream Message);
}

// A chat room.
message Room {
  // The URI of the chat room.
  string name = 1 [(google.api.resource).path = "rooms/{room_id}"];

  // The human readable name of the chat room.
  string display_name = 2 [(google.api.field_behavior) = REQUIRED];

  // The description of the chat room.
  string description = 3;

  // The timestamp at which the room was created.
  google.protobuf.Timestamp create_time = 4 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The latest timestamp at which the room was updated.
  google.protobuf.Timestamp update_time = 5 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// The request message for the google.showcase.v1alpha3.Messaging\CreateRoom
// method.
message CreateRoomRequest {
  // The room to be created. The "room.name", "room.create_time", and
  // "room.update_time" fields will be ignored by the server in this request.
  Room room = 1;
}

// The request message for the google.showcase.v1alpha3.Messaging\GetRoom
// method.
message GetRoomRequest {
  // The URI of the requested room.
  string name = 1 [
    (google.api.resource_reference) = "google.showcase.v1alpha3.Room",
    (google.api.field_behavior) = REQUIRED
  ];
}

// The request message for the google.showcase.v1alpha3.Messaging\UpdateRoom
// method.
message UpdateRoomRequest {
  // The room to be updated.
  Room room = 1;

  // The field mask to determine wich fields are to be updated. If empty, the
  // server will assume all fields are to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// The request message for the google.showcase.v1alpha3.Messaging\DeleteRoom
// method.
message DeleteRoomRequest {
  // The URI of the requested room.
  string name = 1 [
    (google.api.resource_reference) = "google.showcase.v1alpha3.Room",
    (google.api.field_behavior) = REQUIRED
  ];
}

// The request message for the google.showcase.v1alpha3.Messaging\ListRooms
// method.
message ListRoomsRequest {
  // The maximum number of rooms to be returned. Server may return fewer rooms
  // than requested. If unspecified, server will pick an appropriate default.
  int32 page_size = 1;

  // Typically, this is the value of
  // google.showcase.v1alpha3.ListRoomsResponse.next_page_token
  // returned from the previous call to
  // `google.showcase.v1alpha3.Messaging\ListRooms` method.
  string page_token = 2;
}

// The response message for the google.showcase.v1alpha3.Messaging\ListRooms
// method.
message ListRoomsResponse {
  // The list of rooms.
  repeated Room rooms = 1;

  // A token to retrieve next page of results.
  // Pass this value in ListRoomsRequest.page_token field in the subsequent
  // call to `google.showcase.v1alpha3.Message\ListRooms` method to retrieve the
  // next page of results.
  string next_page_token = 2;
}

// This protocol buffer message represents a message sent to a chat room or
// posted on a user profile.
message Message {
  // The URI of the chat room.
  string name = 1 [
    (google.api.resource_set) = {
      resources: [
        {name: "RoomMessage", path: "rooms/{room_id}/messages/{message_id}"},
        {name: "ProfileMessage", path: "user/{user_id}/profile/messages/{message_id}"}
      ]
    }];

  // The URI of the author of this method.
  string author = 2 [
    (google.api.resource_reference) = "google.showcase.v1alpha3.User",
    (google.api.field_behavior) = REQUIRED];

  oneof content {
    // The textual content of this message.
    string text = 3;

    // The image content of this message.
    bytes image = 4;
  }

  // The timestamp at which the message was created.
  google.protobuf.Timestamp create_time = 5 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The latest timestamp at which the message was updated.
  google.protobuf.Timestamp update_time = 6 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// The request message for the google.showcase.v1alpha3.Messaging\CreateMessage
// method.
message CreateMessageRequest {
  // The URI of the chat room or user profile that this message will be tied
  // to.
  string parent = 1 [
    (google.api.resource_set) = {
      name: "MessageParent"
      resources: [{
        name: "Profile",
        path: "users/{user_id}/profile"
      }]
      resource_references: [
        "google.showcase.v1alpha3.Room"
      ]
    },
    (google.api.field_behavior) = REQUIRED
  ];

  // The message to be created. The "message.name", "message.create_time", and
  // "message.update_time" fields will be ignored by the server in this request.
  Message message = 2;
}

// The request message for the google.showcase.v1alpha3.Messaging\GetMessage
// method.
message GetMessageRequest {
  // The URI of the requested message.
  string name = 1 [
    (google.api.resource_reference) = "google.showcase.v1alpha3.Message",
    (google.api.field_behavior) = REQUIRED
  ];
}

// The request message for the google.showcase.v1alpha3.Messaging\UpdateMessage
// method.
message UpdateMessageRequest {
  // The message to be updated.
  Message message = 1;

  // The field mask to determine wich fields are to be updated. If empty, the
  // server will assume all fields are to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// The request message for the google.showcase.v1alpha3.Messaging\DeleteMessage
// method.
message DeleteMessageRequest {
  // The URI of the requested message.
  string name = 1 [
    (google.api.resource_reference) = "google.showcase.v1alpha3.Message",
    (google.api.field_behavior) = REQUIRED
  ];
}

// The request message for the google.showcase.v1alpha3.Messaging\ListMessages
// method.
message ListMessagesRequest {
  // The URI of the requested room or profile whos messages are to be listed.
  string parent = 1 [
    (google.api.resource_reference) = "google.showcase.v1alpha3.MessageParent",
    (google.api.field_behavior) = REQUIRED
  ];


  // The maximum number of rooms to be returned. Server may return fewer rooms
  // than requested. If unspecified, server will pick an appropriate default.
  int32 page_size = 2;

  // Typically, this is the value of
  // google.showcase.v1alpha3.ListMessagesResponse.next_page_token
  // returned from the previous call to
  // `google.showcase.v1alpha3.Messaging\ListMessages` method.
  string page_token = 3;
}

// The response message for the google.showcase.v1alpha3.Messaging\ListMessages
// method.
message ListMessagesResponse {
  // The list of messages.
  repeated Message messages = 1;

  // A token to retrieve next page of results.
  // Pass this value in ListMessagesRequest.page_token field in the subsequent
  // call to `google.showcase.v1alpha3.Message\ListMessages` method to retrieve
  // the next page of results.
  string next_page_token = 2;
}

// The request message for the google.showcase.v1alpha3.Messaging\SearchMessages
// method.
message SearchMessagesRequest {
  // The query used to search for messages containing to words of this string.
  // Only posts that contain an exact match of a queried word will be returned.
  string query = 1 [(google.api.field_behavior) = REQUIRED];
}

// The operation metadata message for the
// google.showcase.v1alpha3.Messaging\SearchMessages method.
message SearchMessagesMetadata {
  // This signals to the client to when to next poll for response.
  google.rpc.RetryInfo retry_info = 1;
}

// The operation response message for the
// google.showcase.v1alpha3.Messaging\SearchMessages method.
message SearchMessagesResponse {
  // Messages that matched the search query.
  repeated Message messages = 1;
}

// The request message for the google.showcase.v1alpha3.Messaging\StreamMessages
// method.
message StreamMessagesRequest {
  // The URI of a chat room or user profile whos massages are to be streamed.
  string name = 1 [
    (google.api.resource_reference) = "google.showcase.v1alpha3.Room",
    (google.api.field_behavior) = REQUIRED
  ];
}

// The response message for the google.showcase.v1alpha3.Messaging\SendMessages
// method.
message SendMessagesResponse {}
