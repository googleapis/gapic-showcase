---
name: assets
on:
  release:
    types:
      - created

env:
  # e.g. v1.0.0
  TAG_NAME: ${{ github.event.release.tag_name }}

jobs:
  proto-assets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.16.3'
      - uses: actions/checkout@v3
      - name: Init submodule
        run: git submodule init && git submodule update
      - name: Install protoc
        run: |
          mkdir protobuf
          curl -sSL https://github.com/protocolbuffers/protobuf/releases/download/v3.15.0/protoc-3.15.0-linux-x86_64.zip > protobuf/protoc.zip
          unzip -d protobuf protobuf/protoc.zip
          echo "./protobuf/bin" >> $GITHUB_PATH
      - name: Compile proto release assets
        run: go run ./util/cmd/release -version=${TAG_NAME#v}
      - name: Upload proto release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ github.token }}
          file: ./dist/*
          tag: ${TAG_NAME}
          overwrite: true
          file_glob: true
  binary-assets:
    runs-on: ubuntu-latest
    needs: proto-assets
    strategy:
      matrix:
        osarch:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm
          - os: darwin
            arch: amd64
          - os: windows
            arch: amd64
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.16.3'
      - uses: actions/checkout@v3
      # The generator does not use these,  but we need them to build the
      # binaries.
      #
      # Mousetrap is installed individually because it is needed for the
      # Windows build. Since we are building on Linux, it is not installed
      # automatically as a dependency.
      - name: Install the cross-platform build tool.
        run: |
          go get github.com/mitchellh/gox
          go get github.com/inconshreveable/mousetrap
      - name: Build for the ${{ matrix.osarch.os }}/${{ matrix.osarch.arch }} platform.
        run: |
          gox -osarch ${{ matrix.osarch.os }}/${{ matrix.osarch.arch }} -output gapic-showcase ./cmd/gapic-showcase && \
          tar cvfz gapic-showcase.tar.gz gapic-showcase*
      - name: Upload the ${{ matrix.osarch.os }}/${{ matrix.osarch.arch }} release.
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./gapic-showcase.tar.gz
          asset_name: gapic-showcase-${TAG_NAME#v}-${{ matrix.osarch.os }}-${{ matrix.osarch.arch }}.tar.gz
          asset_content_type: application/tar+gzip
  # Note: Disabled until better solution for storing the GCR key is found.
  # push_to_registry:
  #   needs:
  #     - inspect
  #     - release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v2
  #     - name: Login to GCR
  #       uses: docker/login-action@v1
  #       with:
  #         registry: gcr.io
  #         username: _json_key
  #         password: ${{ secrets.GCR_JSON_KEY }}
  #     - name: Push to GCR
  #       uses: docker/build-push-action@v2
  #       with:
  #         tags: gcr.io/gapic-images/gapic-showcase:${{ needs.inspect.outputs.raw_version }},gcr.io/gapic-images/gapic-showcase:latest
  #         push: true
  #         context: .
