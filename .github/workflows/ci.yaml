---
name: Showcase CI
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  regenerate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.13.1'
    - name: Checkout common protos
      run: git submodule init && git submodule update
    - name: Install protoc
      run: |
        mkdir protobuf
        curl -sSL https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/protoc-3.14.0-linux-x86_64.zip > protobuf/protoc.zip
        unzip -d protobuf protobuf/protoc.zip
        echo "./protobuf/bin" >> $GITHUB_PATH
    - name: Install external generators
      run: |
        go mod download
        go install github.com/golang/protobuf/protoc-gen-go
        go get github.com/googleapis/gapic-generator-go/cmd/protoc-gen-go_cli
        go get github.com/googleapis/gapic-generator-go/cmd/protoc-gen-go_gapic
    - name: Install REST server generator
      run: go install ./util/cmd/protoc-gen-go_rest_server
    - name: Regenerate sources
      run: go run ./util/cmd/compile_protos
    - uses: actions/upload-artifact@v2
      with:
        name: regenerated-sources
        path: |
          ./**/*.go
  lint:
    needs: regenerate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.13.1'
    - uses: actions/download-artifact@v2
      with:
        name: regenerated-sources
    - name: Check formatting
      run: gofmt -l ./ > gofmt.txt && ! [ -s gofmt.txt ]
    # TODO(noahdietz): Enable these once all issues are resolved.
    # https://github.com/googleapis/gapic-showcase/issues/591
    #
    # - name: Install golint
    #   run: go get -u golang.org/x/lint/golint
    #   if: ${{ always() }}
    # - name: Lint service implementations
    #   run: golint ./server/services >> golint.txt && ! [ -s golint.txt ]
    #   if: ${{ always() }}
    # - name: Vet service implementations
    #   run: go vet ./server/services 2> govet.txt && ! [ -s govet.txt ]
    #   if: ${{ always() }}
    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: linting-results
        path: gofmt.txt
          # TODO(noahdietz): Enable these once all issues are resolved.
          # https://github.com/googleapis/gapic-showcase/issues/591
          # 
          # golint.txt
          # govet.txt
  tests:
    needs: regenerate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.13.1'
    - uses: actions/download-artifact@v2
      with:
        name: regenerated-sources
    - name: Run unit tests
      run: go test ./...
    - name: Run server coverage
      run: go test ./server/... -coverprofile=coverage.txt -covermode=atomic
    - uses: codecov/codecov-action@v1
      with:
        files: ./coverage.txt
        flags: unittests
  probes:
    needs: regenerate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.13.1'
    - uses: actions/download-artifact@v2
      with:
        name: regenerated-sources
    - name: Install gapic-showcase CLI
      run: go install ./cmd/gapic-showcase
    - name: Probe gRPC and REST servers
      run: |
        gapic-showcase run &
        gapic-showcase echo echo --response content --response.content "hello!"
        GRPC_EXIT_CODE=$?
        STATUSCODE=$(curl --silent --output /dev/null --write-out "%{http_code}" http://localhost:7469/hello)
        echo "gRPC exit code: $GRPC_EXIT_CODE"
        echo "REST status code: $STATUSCODE"
        [ $STATUSCODE = "200" ]  && [ GRPC_EXIT_CODE != 0 ]
  push-generated-sources:
    needs: [regenerate, lint, tests, probes]
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.13.1'
    - uses: actions/download-artifact@v2
      with:
        name: regenerated-sources
    - name: Check for modified files
      id: git-check
      run: echo ::set-output name=modified::$(if git diff-index --quiet HEAD server/ client/ cmd/; then echo "false"; else echo "true"; fi)
    - name: Create Pull Request
      if: steps.git-check.outputs.modified == 'true'
      uses: peter-evans/create-pull-request@v3
      with:
        title: 'chore: regenerate sources'
        body: |
          Regenerated sources as a result of the following change:
          https://github.com/googleapis/gapic-showcase/commit/${GITHUB_SHA}
        branch: regen
        base: master
        labels: automerge
        reviewers: |
          noahdietz
          vchudnov-g
