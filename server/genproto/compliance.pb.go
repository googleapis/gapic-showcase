// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.3
// source: google/showcase/v1beta1/compliance.proto

package genproto

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Continent int32

const (
	Continent_CONTINENT_UNSPECIFIED Continent = 0
	Continent_AFRICA                Continent = 1
	Continent_AMERICA               Continent = 2
	Continent_ANTARTICA             Continent = 3
	Continent_AUSTRALIA             Continent = 4
	Continent_EUROPE                Continent = 5
)

// Enum value maps for Continent.
var (
	Continent_name = map[int32]string{
		0: "CONTINENT_UNSPECIFIED",
		1: "AFRICA",
		2: "AMERICA",
		3: "ANTARTICA",
		4: "AUSTRALIA",
		5: "EUROPE",
	}
	Continent_value = map[string]int32{
		"CONTINENT_UNSPECIFIED": 0,
		"AFRICA":                1,
		"AMERICA":               2,
		"ANTARTICA":             3,
		"AUSTRALIA":             4,
		"EUROPE":                5,
	}
)

func (x Continent) Enum() *Continent {
	p := new(Continent)
	*p = x
	return p
}

func (x Continent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Continent) Descriptor() protoreflect.EnumDescriptor {
	return file_google_showcase_v1beta1_compliance_proto_enumTypes[0].Descriptor()
}

func (Continent) Type() protoreflect.EnumType {
	return &file_google_showcase_v1beta1_compliance_proto_enumTypes[0]
}

func (x Continent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Continent.Descriptor instead.
func (Continent) EnumDescriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_compliance_proto_rawDescGZIP(), []int{0}
}

type ComplianceData_LifeKingdom int32

const (
	ComplianceData_LIFE_KINGDOM_UNSPECIFIED ComplianceData_LifeKingdom = 0
	ComplianceData_ARCHAEBACTERIA           ComplianceData_LifeKingdom = 1
	ComplianceData_EUBACTERIA               ComplianceData_LifeKingdom = 2
	ComplianceData_PROTISTA                 ComplianceData_LifeKingdom = 3
	ComplianceData_FUNGI                    ComplianceData_LifeKingdom = 4
	ComplianceData_PLANTAE                  ComplianceData_LifeKingdom = 5
	ComplianceData_ANIMALIA                 ComplianceData_LifeKingdom = 6
)

// Enum value maps for ComplianceData_LifeKingdom.
var (
	ComplianceData_LifeKingdom_name = map[int32]string{
		0: "LIFE_KINGDOM_UNSPECIFIED",
		1: "ARCHAEBACTERIA",
		2: "EUBACTERIA",
		3: "PROTISTA",
		4: "FUNGI",
		5: "PLANTAE",
		6: "ANIMALIA",
	}
	ComplianceData_LifeKingdom_value = map[string]int32{
		"LIFE_KINGDOM_UNSPECIFIED": 0,
		"ARCHAEBACTERIA":           1,
		"EUBACTERIA":               2,
		"PROTISTA":                 3,
		"FUNGI":                    4,
		"PLANTAE":                  5,
		"ANIMALIA":                 6,
	}
)

func (x ComplianceData_LifeKingdom) Enum() *ComplianceData_LifeKingdom {
	p := new(ComplianceData_LifeKingdom)
	*p = x
	return p
}

func (x ComplianceData_LifeKingdom) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComplianceData_LifeKingdom) Descriptor() protoreflect.EnumDescriptor {
	return file_google_showcase_v1beta1_compliance_proto_enumTypes[1].Descriptor()
}

func (ComplianceData_LifeKingdom) Type() protoreflect.EnumType {
	return &file_google_showcase_v1beta1_compliance_proto_enumTypes[1]
}

func (x ComplianceData_LifeKingdom) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComplianceData_LifeKingdom.Descriptor instead.
func (ComplianceData_LifeKingdom) EnumDescriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_compliance_proto_rawDescGZIP(), []int{4, 0}
}

type RepeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Info *ComplianceData `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// If true, the server will verify that the received request matches
	// the request with the same name in the compliance test suite.
	ServerVerify bool `protobuf:"varint,3,opt,name=server_verify,json=serverVerify,proto3" json:"server_verify,omitempty"`
	// The URI template this request is expected to be bound to server-side.
	IntendedBindingUri *string `protobuf:"bytes,10,opt,name=intended_binding_uri,json=intendedBindingUri,proto3,oneof" json:"intended_binding_uri,omitempty"`
	// Some top level fields, to test that these are encoded correctly
	// in query params.
	FInt32  int32    `protobuf:"varint,4,opt,name=f_int32,json=fInt32,proto3" json:"f_int32,omitempty"`
	FInt64  int64    `protobuf:"varint,5,opt,name=f_int64,json=fInt64,proto3" json:"f_int64,omitempty"`
	FDouble float64  `protobuf:"fixed64,6,opt,name=f_double,json=fDouble,proto3" json:"f_double,omitempty"`
	PInt32  *int32   `protobuf:"varint,7,opt,name=p_int32,json=pInt32,proto3,oneof" json:"p_int32,omitempty"`
	PInt64  *int64   `protobuf:"varint,8,opt,name=p_int64,json=pInt64,proto3,oneof" json:"p_int64,omitempty"`
	PDouble *float64 `protobuf:"fixed64,9,opt,name=p_double,json=pDouble,proto3,oneof" json:"p_double,omitempty"`
}

func (x *RepeatRequest) Reset() {
	*x = RepeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatRequest) ProtoMessage() {}

func (x *RepeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatRequest.ProtoReflect.Descriptor instead.
func (*RepeatRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_compliance_proto_rawDescGZIP(), []int{0}
}

func (x *RepeatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatRequest) GetInfo() *ComplianceData {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *RepeatRequest) GetServerVerify() bool {
	if x != nil {
		return x.ServerVerify
	}
	return false
}

func (x *RepeatRequest) GetIntendedBindingUri() string {
	if x != nil && x.IntendedBindingUri != nil {
		return *x.IntendedBindingUri
	}
	return ""
}

func (x *RepeatRequest) GetFInt32() int32 {
	if x != nil {
		return x.FInt32
	}
	return 0
}

func (x *RepeatRequest) GetFInt64() int64 {
	if x != nil {
		return x.FInt64
	}
	return 0
}

func (x *RepeatRequest) GetFDouble() float64 {
	if x != nil {
		return x.FDouble
	}
	return 0
}

func (x *RepeatRequest) GetPInt32() int32 {
	if x != nil && x.PInt32 != nil {
		return *x.PInt32
	}
	return 0
}

func (x *RepeatRequest) GetPInt64() int64 {
	if x != nil && x.PInt64 != nil {
		return *x.PInt64
	}
	return 0
}

func (x *RepeatRequest) GetPDouble() float64 {
	if x != nil && x.PDouble != nil {
		return *x.PDouble
	}
	return 0
}

type RepeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *RepeatRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// The URI template the request was bound to server-side.
	BindingUri string `protobuf:"bytes,2,opt,name=binding_uri,json=bindingUri,proto3" json:"binding_uri,omitempty"`
}

func (x *RepeatResponse) Reset() {
	*x = RepeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatResponse) ProtoMessage() {}

func (x *RepeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatResponse.ProtoReflect.Descriptor instead.
func (*RepeatResponse) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_compliance_proto_rawDescGZIP(), []int{1}
}

func (x *RepeatResponse) GetRequest() *RepeatRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RepeatResponse) GetBindingUri() string {
	if x != nil {
		return x.BindingUri
	}
	return ""
}

// ComplianceSuite contains a set of requests that microgenerators should issue
// over REST to the Compliance service to test their gRPC-to-REST transcoding
// implementation.
type ComplianceSuite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group []*ComplianceGroup `protobuf:"bytes,1,rep,name=group,proto3" json:"group,omitempty"`
}

func (x *ComplianceSuite) Reset() {
	*x = ComplianceSuite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceSuite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceSuite) ProtoMessage() {}

func (x *ComplianceSuite) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceSuite.ProtoReflect.Descriptor instead.
func (*ComplianceSuite) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_compliance_proto_rawDescGZIP(), []int{2}
}

func (x *ComplianceSuite) GetGroup() []*ComplianceGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// ComplianceGroups encapsulates a group of RPC requests to the Compliance
// server: one request for each combination of elements of `rpcs` and of
// `requests`.
type ComplianceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rpcs     []string         `protobuf:"bytes,2,rep,name=rpcs,proto3" json:"rpcs,omitempty"`
	Requests []*RepeatRequest `protobuf:"bytes,3,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *ComplianceGroup) Reset() {
	*x = ComplianceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceGroup) ProtoMessage() {}

func (x *ComplianceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceGroup.ProtoReflect.Descriptor instead.
func (*ComplianceGroup) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_compliance_proto_rawDescGZIP(), []int{3}
}

func (x *ComplianceGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplianceGroup) GetRpcs() []string {
	if x != nil {
		return x.Rpcs
	}
	return nil
}

func (x *ComplianceGroup) GetRequests() []*RepeatRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// ComplianceData is a message used for testing REST transcoding of
// different data types.
type ComplianceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString   string                      `protobuf:"bytes,1,opt,name=f_string,json=fString,proto3" json:"f_string,omitempty"`
	FInt32    int32                       `protobuf:"varint,2,opt,name=f_int32,json=fInt32,proto3" json:"f_int32,omitempty"`
	FSint32   int32                       `protobuf:"zigzag32,3,opt,name=f_sint32,json=fSint32,proto3" json:"f_sint32,omitempty"`
	FSfixed32 int32                       `protobuf:"fixed32,4,opt,name=f_sfixed32,json=fSfixed32,proto3" json:"f_sfixed32,omitempty"`
	FUint32   uint32                      `protobuf:"varint,5,opt,name=f_uint32,json=fUint32,proto3" json:"f_uint32,omitempty"`
	FFixed32  uint32                      `protobuf:"fixed32,6,opt,name=f_fixed32,json=fFixed32,proto3" json:"f_fixed32,omitempty"`
	FInt64    int64                       `protobuf:"varint,7,opt,name=f_int64,json=fInt64,proto3" json:"f_int64,omitempty"`
	FSint64   int64                       `protobuf:"zigzag64,8,opt,name=f_sint64,json=fSint64,proto3" json:"f_sint64,omitempty"`
	FSfixed64 int64                       `protobuf:"fixed64,9,opt,name=f_sfixed64,json=fSfixed64,proto3" json:"f_sfixed64,omitempty"`
	FUint64   uint64                      `protobuf:"varint,10,opt,name=f_uint64,json=fUint64,proto3" json:"f_uint64,omitempty"`
	FFixed64  uint64                      `protobuf:"fixed64,11,opt,name=f_fixed64,json=fFixed64,proto3" json:"f_fixed64,omitempty"`
	FDouble   float64                     `protobuf:"fixed64,12,opt,name=f_double,json=fDouble,proto3" json:"f_double,omitempty"`
	FFloat    float32                     `protobuf:"fixed32,13,opt,name=f_float,json=fFloat,proto3" json:"f_float,omitempty"`
	FBool     bool                        `protobuf:"varint,14,opt,name=f_bool,json=fBool,proto3" json:"f_bool,omitempty"`
	FBytes    []byte                      `protobuf:"bytes,15,opt,name=f_bytes,json=fBytes,proto3" json:"f_bytes,omitempty"`
	FKingdom  ComplianceData_LifeKingdom  `protobuf:"varint,22,opt,name=f_kingdom,json=fKingdom,proto3,enum=google.showcase.v1beta1.ComplianceData_LifeKingdom" json:"f_kingdom,omitempty"`
	FChild    *ComplianceDataChild        `protobuf:"bytes,16,opt,name=f_child,json=fChild,proto3" json:"f_child,omitempty"`
	PString   *string                     `protobuf:"bytes,17,opt,name=p_string,json=pString,proto3,oneof" json:"p_string,omitempty"`
	PInt32    *int32                      `protobuf:"varint,18,opt,name=p_int32,json=pInt32,proto3,oneof" json:"p_int32,omitempty"`
	PDouble   *float64                    `protobuf:"fixed64,19,opt,name=p_double,json=pDouble,proto3,oneof" json:"p_double,omitempty"`
	PBool     *bool                       `protobuf:"varint,20,opt,name=p_bool,json=pBool,proto3,oneof" json:"p_bool,omitempty"`
	PKingdom  *ComplianceData_LifeKingdom `protobuf:"varint,23,opt,name=p_kingdom,json=pKingdom,proto3,enum=google.showcase.v1beta1.ComplianceData_LifeKingdom,oneof" json:"p_kingdom,omitempty"`
	PChild    *ComplianceDataChild        `protobuf:"bytes,21,opt,name=p_child,json=pChild,proto3,oneof" json:"p_child,omitempty"`
}

func (x *ComplianceData) Reset() {
	*x = ComplianceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceData) ProtoMessage() {}

func (x *ComplianceData) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceData.ProtoReflect.Descriptor instead.
func (*ComplianceData) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_compliance_proto_rawDescGZIP(), []int{4}
}

func (x *ComplianceData) GetFString() string {
	if x != nil {
		return x.FString
	}
	return ""
}

func (x *ComplianceData) GetFInt32() int32 {
	if x != nil {
		return x.FInt32
	}
	return 0
}

func (x *ComplianceData) GetFSint32() int32 {
	if x != nil {
		return x.FSint32
	}
	return 0
}

func (x *ComplianceData) GetFSfixed32() int32 {
	if x != nil {
		return x.FSfixed32
	}
	return 0
}

func (x *ComplianceData) GetFUint32() uint32 {
	if x != nil {
		return x.FUint32
	}
	return 0
}

func (x *ComplianceData) GetFFixed32() uint32 {
	if x != nil {
		return x.FFixed32
	}
	return 0
}

func (x *ComplianceData) GetFInt64() int64 {
	if x != nil {
		return x.FInt64
	}
	return 0
}

func (x *ComplianceData) GetFSint64() int64 {
	if x != nil {
		return x.FSint64
	}
	return 0
}

func (x *ComplianceData) GetFSfixed64() int64 {
	if x != nil {
		return x.FSfixed64
	}
	return 0
}

func (x *ComplianceData) GetFUint64() uint64 {
	if x != nil {
		return x.FUint64
	}
	return 0
}

func (x *ComplianceData) GetFFixed64() uint64 {
	if x != nil {
		return x.FFixed64
	}
	return 0
}

func (x *ComplianceData) GetFDouble() float64 {
	if x != nil {
		return x.FDouble
	}
	return 0
}

func (x *ComplianceData) GetFFloat() float32 {
	if x != nil {
		return x.FFloat
	}
	return 0
}

func (x *ComplianceData) GetFBool() bool {
	if x != nil {
		return x.FBool
	}
	return false
}

func (x *ComplianceData) GetFBytes() []byte {
	if x != nil {
		return x.FBytes
	}
	return nil
}

func (x *ComplianceData) GetFKingdom() ComplianceData_LifeKingdom {
	if x != nil {
		return x.FKingdom
	}
	return ComplianceData_LIFE_KINGDOM_UNSPECIFIED
}

func (x *ComplianceData) GetFChild() *ComplianceDataChild {
	if x != nil {
		return x.FChild
	}
	return nil
}

func (x *ComplianceData) GetPString() string {
	if x != nil && x.PString != nil {
		return *x.PString
	}
	return ""
}

func (x *ComplianceData) GetPInt32() int32 {
	if x != nil && x.PInt32 != nil {
		return *x.PInt32
	}
	return 0
}

func (x *ComplianceData) GetPDouble() float64 {
	if x != nil && x.PDouble != nil {
		return *x.PDouble
	}
	return 0
}

func (x *ComplianceData) GetPBool() bool {
	if x != nil && x.PBool != nil {
		return *x.PBool
	}
	return false
}

func (x *ComplianceData) GetPKingdom() ComplianceData_LifeKingdom {
	if x != nil && x.PKingdom != nil {
		return *x.PKingdom
	}
	return ComplianceData_LIFE_KINGDOM_UNSPECIFIED
}

func (x *ComplianceData) GetPChild() *ComplianceDataChild {
	if x != nil {
		return x.PChild
	}
	return nil
}

type ComplianceDataChild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString    string                    `protobuf:"bytes,1,opt,name=f_string,json=fString,proto3" json:"f_string,omitempty"`
	FFloat     float32                   `protobuf:"fixed32,2,opt,name=f_float,json=fFloat,proto3" json:"f_float,omitempty"`
	FDouble    float64                   `protobuf:"fixed64,3,opt,name=f_double,json=fDouble,proto3" json:"f_double,omitempty"`
	FBool      bool                      `protobuf:"varint,4,opt,name=f_bool,json=fBool,proto3" json:"f_bool,omitempty"`
	FContinent Continent                 `protobuf:"varint,11,opt,name=f_continent,json=fContinent,proto3,enum=google.showcase.v1beta1.Continent" json:"f_continent,omitempty"`
	FChild     *ComplianceDataGrandchild `protobuf:"bytes,5,opt,name=f_child,json=fChild,proto3" json:"f_child,omitempty"`
	PString    *string                   `protobuf:"bytes,6,opt,name=p_string,json=pString,proto3,oneof" json:"p_string,omitempty"`
	PFloat     *float32                  `protobuf:"fixed32,7,opt,name=p_float,json=pFloat,proto3,oneof" json:"p_float,omitempty"`
	PDouble    *float64                  `protobuf:"fixed64,8,opt,name=p_double,json=pDouble,proto3,oneof" json:"p_double,omitempty"`
	PBool      *bool                     `protobuf:"varint,9,opt,name=p_bool,json=pBool,proto3,oneof" json:"p_bool,omitempty"`
	PContinent Continent                 `protobuf:"varint,12,opt,name=p_continent,json=pContinent,proto3,enum=google.showcase.v1beta1.Continent" json:"p_continent,omitempty"`
	PChild     *ComplianceDataGrandchild `protobuf:"bytes,10,opt,name=p_child,json=pChild,proto3,oneof" json:"p_child,omitempty"`
}

func (x *ComplianceDataChild) Reset() {
	*x = ComplianceDataChild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceDataChild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceDataChild) ProtoMessage() {}

func (x *ComplianceDataChild) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceDataChild.ProtoReflect.Descriptor instead.
func (*ComplianceDataChild) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_compliance_proto_rawDescGZIP(), []int{5}
}

func (x *ComplianceDataChild) GetFString() string {
	if x != nil {
		return x.FString
	}
	return ""
}

func (x *ComplianceDataChild) GetFFloat() float32 {
	if x != nil {
		return x.FFloat
	}
	return 0
}

func (x *ComplianceDataChild) GetFDouble() float64 {
	if x != nil {
		return x.FDouble
	}
	return 0
}

func (x *ComplianceDataChild) GetFBool() bool {
	if x != nil {
		return x.FBool
	}
	return false
}

func (x *ComplianceDataChild) GetFContinent() Continent {
	if x != nil {
		return x.FContinent
	}
	return Continent_CONTINENT_UNSPECIFIED
}

func (x *ComplianceDataChild) GetFChild() *ComplianceDataGrandchild {
	if x != nil {
		return x.FChild
	}
	return nil
}

func (x *ComplianceDataChild) GetPString() string {
	if x != nil && x.PString != nil {
		return *x.PString
	}
	return ""
}

func (x *ComplianceDataChild) GetPFloat() float32 {
	if x != nil && x.PFloat != nil {
		return *x.PFloat
	}
	return 0
}

func (x *ComplianceDataChild) GetPDouble() float64 {
	if x != nil && x.PDouble != nil {
		return *x.PDouble
	}
	return 0
}

func (x *ComplianceDataChild) GetPBool() bool {
	if x != nil && x.PBool != nil {
		return *x.PBool
	}
	return false
}

func (x *ComplianceDataChild) GetPContinent() Continent {
	if x != nil {
		return x.PContinent
	}
	return Continent_CONTINENT_UNSPECIFIED
}

func (x *ComplianceDataChild) GetPChild() *ComplianceDataGrandchild {
	if x != nil {
		return x.PChild
	}
	return nil
}

type ComplianceDataGrandchild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString string  `protobuf:"bytes,1,opt,name=f_string,json=fString,proto3" json:"f_string,omitempty"`
	FDouble float64 `protobuf:"fixed64,2,opt,name=f_double,json=fDouble,proto3" json:"f_double,omitempty"`
	FBool   bool    `protobuf:"varint,3,opt,name=f_bool,json=fBool,proto3" json:"f_bool,omitempty"`
}

func (x *ComplianceDataGrandchild) Reset() {
	*x = ComplianceDataGrandchild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceDataGrandchild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceDataGrandchild) ProtoMessage() {}

func (x *ComplianceDataGrandchild) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceDataGrandchild.ProtoReflect.Descriptor instead.
func (*ComplianceDataGrandchild) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_compliance_proto_rawDescGZIP(), []int{6}
}

func (x *ComplianceDataGrandchild) GetFString() string {
	if x != nil {
		return x.FString
	}
	return ""
}

func (x *ComplianceDataGrandchild) GetFDouble() float64 {
	if x != nil {
		return x.FDouble
	}
	return 0
}

func (x *ComplianceDataGrandchild) GetFBool() bool {
	if x != nil {
		return x.FBool
	}
	return false
}

type EnumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the client is requesting a new, unknown enum value or a known enum value already declard in this proto file.
	UnknownEnum bool `protobuf:"varint,1,opt,name=unknown_enum,json=unknownEnum,proto3" json:"unknown_enum,omitempty"`
}

func (x *EnumRequest) Reset() {
	*x = EnumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumRequest) ProtoMessage() {}

func (x *EnumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumRequest.ProtoReflect.Descriptor instead.
func (*EnumRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_compliance_proto_rawDescGZIP(), []int{7}
}

func (x *EnumRequest) GetUnknownEnum() bool {
	if x != nil {
		return x.UnknownEnum
	}
	return false
}

type EnumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The original request for a known or unknown enum from the server.
	Request *EnumRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// The actual enum the server provided.
	Continent Continent `protobuf:"varint,2,opt,name=continent,proto3,enum=google.showcase.v1beta1.Continent" json:"continent,omitempty"`
}

func (x *EnumResponse) Reset() {
	*x = EnumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumResponse) ProtoMessage() {}

func (x *EnumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_compliance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumResponse.ProtoReflect.Descriptor instead.
func (*EnumResponse) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_compliance_proto_rawDescGZIP(), []int{8}
}

func (x *EnumResponse) GetRequest() *EnumRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *EnumResponse) GetContinent() Continent {
	if x != nil {
		return x.Continent
	}
	return Continent_CONTINENT_UNSPECIFIED
}

var File_google_showcase_v1beta1_compliance_proto protoreflect.FileDescriptor

var file_google_showcase_v1beta1_compliance_proto_rawDesc = []byte{
	0x0a, 0x28, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73,
	0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x03, 0x0a, 0x0d, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x12, 0x35, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x06, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x07, 0x70, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x22, 0x73, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x55, 0x72, 0x69, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x7d, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x70, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x70, 0x63, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xac, 0x08, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x07, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x09, 0x66,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x66, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x10, 0x52, 0x09, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x08, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x50, 0x0a, 0x09, 0x66, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x66, 0x65,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x52, 0x08, 0x66, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f,
	0x6d, 0x12, 0x45, 0x0a, 0x07, 0x66, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x52, 0x06, 0x66, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x07, 0x70, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x05, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x55, 0x0a, 0x09, 0x70, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c,
	0x69, 0x66, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x48, 0x04, 0x52, 0x08, 0x70, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x48, 0x05, 0x52, 0x06, 0x70, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x88, 0x01, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x66, 0x65, 0x4b, 0x69,
	0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x4b, 0x49,
	0x4e, 0x47, 0x44, 0x4f, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x52, 0x43, 0x48, 0x41, 0x45, 0x42, 0x41, 0x43,
	0x54, 0x45, 0x52, 0x49, 0x41, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x55, 0x42, 0x41, 0x43,
	0x54, 0x45, 0x52, 0x49, 0x41, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x49,
	0x53, 0x54, 0x41, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x55, 0x4e, 0x47, 0x49, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x41, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x49, 0x41, 0x10, 0x06, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70,
	0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xd9, 0x04, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x43, 0x0a, 0x0b, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x66,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x66, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x06, 0x66,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x06, 0x70, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x07, 0x70, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x05, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x43, 0x0a, 0x0b, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x70, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72,
	0x61, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x48, 0x04, 0x52, 0x06, 0x70, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x22, 0x67, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x30, 0x0a, 0x0b, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x90, 0x01,
	0x0a, 0x0c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74,
	0x2a, 0x69, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x46, 0x52, 0x49,
	0x43, 0x41, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x54, 0x41, 0x52, 0x54, 0x49, 0x43, 0x41, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x53, 0x54, 0x52, 0x41, 0x4c, 0x49, 0x41, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x55, 0x52, 0x4f, 0x50, 0x45, 0x10, 0x05, 0x32, 0xd8, 0x0d, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x26, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x3a, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x8d, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6f,
	0x64, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x3a, 0x62, 0x6f, 0x64, 0x79, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x81, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x3a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0xd9, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x6a, 0x12, 0x68, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x2f, 0x7b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x66, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x66, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x66, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x66, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x66, 0x5f, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x6f, 0x6d, 0x7d, 0x3a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12,
	0xd3, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe7, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xe0, 0x01, 0x5a, 0x74, 0x12, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x2f, 0x7b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x66,
	0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x2e, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3d,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x2f, 0x2a, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x66,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2f, 0x2a,
	0x7d, 0x2f, 0x62, 0x6f, 0x6f, 0x6c, 0x2f, 0x7b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x66, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x7d, 0x3a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x66, 0x69, 0x72, 0x73, 0x74, 0x70,
	0x61, 0x74, 0x68, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x68, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x2f, 0x7b, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3d, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x2f, 0x2a, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x66, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x2e, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3d, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x2f, 0x2a, 0x7d, 0x2f, 0x62, 0x6f, 0x6f, 0x6c, 0x2f, 0x7b, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x7d, 0x3a, 0x70, 0x61, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xd9, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x60, 0x12, 0x5e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x2f, 0x7b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2f, 0x2a, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x66, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x2e, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2f, 0x2a, 0x2a, 0x7d, 0x3a, 0x70, 0x61, 0x74,
	0x68, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x6f, 0x64, 0x79, 0x50, 0x75, 0x74, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x3a, 0x01, 0x2a, 0x1a, 0x17, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x3a, 0x62, 0x6f, 0x64, 0x79, 0x70, 0x75, 0x74, 0x12, 0x8c, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a,
	0x32, 0x19, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x3a, 0x62, 0x6f, 0x64, 0x79, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x78, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x7c, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x1a, 0x11, 0xca, 0x41, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73,
	0x74, 0x3a, 0x37, 0x34, 0x36, 0x39, 0x42, 0x71, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67,
	0x61, 0x70, 0x69, 0x63, 0x2d, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xea, 0x02, 0x19,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_google_showcase_v1beta1_compliance_proto_rawDescOnce sync.Once
	file_google_showcase_v1beta1_compliance_proto_rawDescData = file_google_showcase_v1beta1_compliance_proto_rawDesc
)

func file_google_showcase_v1beta1_compliance_proto_rawDescGZIP() []byte {
	file_google_showcase_v1beta1_compliance_proto_rawDescOnce.Do(func() {
		file_google_showcase_v1beta1_compliance_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_showcase_v1beta1_compliance_proto_rawDescData)
	})
	return file_google_showcase_v1beta1_compliance_proto_rawDescData
}

var file_google_showcase_v1beta1_compliance_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_showcase_v1beta1_compliance_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_google_showcase_v1beta1_compliance_proto_goTypes = []interface{}{
	(Continent)(0),                   // 0: google.showcase.v1beta1.Continent
	(ComplianceData_LifeKingdom)(0),  // 1: google.showcase.v1beta1.ComplianceData.LifeKingdom
	(*RepeatRequest)(nil),            // 2: google.showcase.v1beta1.RepeatRequest
	(*RepeatResponse)(nil),           // 3: google.showcase.v1beta1.RepeatResponse
	(*ComplianceSuite)(nil),          // 4: google.showcase.v1beta1.ComplianceSuite
	(*ComplianceGroup)(nil),          // 5: google.showcase.v1beta1.ComplianceGroup
	(*ComplianceData)(nil),           // 6: google.showcase.v1beta1.ComplianceData
	(*ComplianceDataChild)(nil),      // 7: google.showcase.v1beta1.ComplianceDataChild
	(*ComplianceDataGrandchild)(nil), // 8: google.showcase.v1beta1.ComplianceDataGrandchild
	(*EnumRequest)(nil),              // 9: google.showcase.v1beta1.EnumRequest
	(*EnumResponse)(nil),             // 10: google.showcase.v1beta1.EnumResponse
}
var file_google_showcase_v1beta1_compliance_proto_depIdxs = []int32{
	6,  // 0: google.showcase.v1beta1.RepeatRequest.info:type_name -> google.showcase.v1beta1.ComplianceData
	2,  // 1: google.showcase.v1beta1.RepeatResponse.request:type_name -> google.showcase.v1beta1.RepeatRequest
	5,  // 2: google.showcase.v1beta1.ComplianceSuite.group:type_name -> google.showcase.v1beta1.ComplianceGroup
	2,  // 3: google.showcase.v1beta1.ComplianceGroup.requests:type_name -> google.showcase.v1beta1.RepeatRequest
	1,  // 4: google.showcase.v1beta1.ComplianceData.f_kingdom:type_name -> google.showcase.v1beta1.ComplianceData.LifeKingdom
	7,  // 5: google.showcase.v1beta1.ComplianceData.f_child:type_name -> google.showcase.v1beta1.ComplianceDataChild
	1,  // 6: google.showcase.v1beta1.ComplianceData.p_kingdom:type_name -> google.showcase.v1beta1.ComplianceData.LifeKingdom
	7,  // 7: google.showcase.v1beta1.ComplianceData.p_child:type_name -> google.showcase.v1beta1.ComplianceDataChild
	0,  // 8: google.showcase.v1beta1.ComplianceDataChild.f_continent:type_name -> google.showcase.v1beta1.Continent
	8,  // 9: google.showcase.v1beta1.ComplianceDataChild.f_child:type_name -> google.showcase.v1beta1.ComplianceDataGrandchild
	0,  // 10: google.showcase.v1beta1.ComplianceDataChild.p_continent:type_name -> google.showcase.v1beta1.Continent
	8,  // 11: google.showcase.v1beta1.ComplianceDataChild.p_child:type_name -> google.showcase.v1beta1.ComplianceDataGrandchild
	9,  // 12: google.showcase.v1beta1.EnumResponse.request:type_name -> google.showcase.v1beta1.EnumRequest
	0,  // 13: google.showcase.v1beta1.EnumResponse.continent:type_name -> google.showcase.v1beta1.Continent
	2,  // 14: google.showcase.v1beta1.Compliance.RepeatDataBody:input_type -> google.showcase.v1beta1.RepeatRequest
	2,  // 15: google.showcase.v1beta1.Compliance.RepeatDataBodyInfo:input_type -> google.showcase.v1beta1.RepeatRequest
	2,  // 16: google.showcase.v1beta1.Compliance.RepeatDataQuery:input_type -> google.showcase.v1beta1.RepeatRequest
	2,  // 17: google.showcase.v1beta1.Compliance.RepeatDataSimplePath:input_type -> google.showcase.v1beta1.RepeatRequest
	2,  // 18: google.showcase.v1beta1.Compliance.RepeatDataPathResource:input_type -> google.showcase.v1beta1.RepeatRequest
	2,  // 19: google.showcase.v1beta1.Compliance.RepeatDataPathTrailingResource:input_type -> google.showcase.v1beta1.RepeatRequest
	2,  // 20: google.showcase.v1beta1.Compliance.RepeatDataBodyPut:input_type -> google.showcase.v1beta1.RepeatRequest
	2,  // 21: google.showcase.v1beta1.Compliance.RepeatDataBodyPatch:input_type -> google.showcase.v1beta1.RepeatRequest
	9,  // 22: google.showcase.v1beta1.Compliance.GetEnum:input_type -> google.showcase.v1beta1.EnumRequest
	10, // 23: google.showcase.v1beta1.Compliance.VerifyEnum:input_type -> google.showcase.v1beta1.EnumResponse
	3,  // 24: google.showcase.v1beta1.Compliance.RepeatDataBody:output_type -> google.showcase.v1beta1.RepeatResponse
	3,  // 25: google.showcase.v1beta1.Compliance.RepeatDataBodyInfo:output_type -> google.showcase.v1beta1.RepeatResponse
	3,  // 26: google.showcase.v1beta1.Compliance.RepeatDataQuery:output_type -> google.showcase.v1beta1.RepeatResponse
	3,  // 27: google.showcase.v1beta1.Compliance.RepeatDataSimplePath:output_type -> google.showcase.v1beta1.RepeatResponse
	3,  // 28: google.showcase.v1beta1.Compliance.RepeatDataPathResource:output_type -> google.showcase.v1beta1.RepeatResponse
	3,  // 29: google.showcase.v1beta1.Compliance.RepeatDataPathTrailingResource:output_type -> google.showcase.v1beta1.RepeatResponse
	3,  // 30: google.showcase.v1beta1.Compliance.RepeatDataBodyPut:output_type -> google.showcase.v1beta1.RepeatResponse
	3,  // 31: google.showcase.v1beta1.Compliance.RepeatDataBodyPatch:output_type -> google.showcase.v1beta1.RepeatResponse
	10, // 32: google.showcase.v1beta1.Compliance.GetEnum:output_type -> google.showcase.v1beta1.EnumResponse
	10, // 33: google.showcase.v1beta1.Compliance.VerifyEnum:output_type -> google.showcase.v1beta1.EnumResponse
	24, // [24:34] is the sub-list for method output_type
	14, // [14:24] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_google_showcase_v1beta1_compliance_proto_init() }
func file_google_showcase_v1beta1_compliance_proto_init() {
	if File_google_showcase_v1beta1_compliance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_showcase_v1beta1_compliance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_compliance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_compliance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceSuite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_compliance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_compliance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_compliance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceDataChild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_compliance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceDataGrandchild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_compliance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_compliance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_showcase_v1beta1_compliance_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_google_showcase_v1beta1_compliance_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_google_showcase_v1beta1_compliance_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_showcase_v1beta1_compliance_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_showcase_v1beta1_compliance_proto_goTypes,
		DependencyIndexes: file_google_showcase_v1beta1_compliance_proto_depIdxs,
		EnumInfos:         file_google_showcase_v1beta1_compliance_proto_enumTypes,
		MessageInfos:      file_google_showcase_v1beta1_compliance_proto_msgTypes,
	}.Build()
	File_google_showcase_v1beta1_compliance_proto = out.File
	file_google_showcase_v1beta1_compliance_proto_rawDesc = nil
	file_google_showcase_v1beta1_compliance_proto_goTypes = nil
	file_google_showcase_v1beta1_compliance_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ComplianceClient is the client API for Compliance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComplianceClient interface {
	// This method echoes the ComplianceData request. This method exercises
	// sending the entire request object in the REST body.
	RepeatDataBody(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error)
	// This method echoes the ComplianceData request. This method exercises
	// sending the a message-type field in the REST body. Per AIP-127, only
	// top-level, non-repeated fields can be sent this way.
	RepeatDataBodyInfo(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error)
	// This method echoes the ComplianceData request. This method exercises
	// sending all request fields as query parameters.
	RepeatDataQuery(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error)
	// This method echoes the ComplianceData request. This method exercises
	// sending some parameters as "simple" path variables (i.e., of the form
	// "/bar/{foo}" rather than "/{foo=bar/*}"), and the rest as query parameters.
	RepeatDataSimplePath(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error)
	// Same as RepeatDataSimplePath, but with a path resource.
	RepeatDataPathResource(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error)
	// Same as RepeatDataSimplePath, but with a trailing resource.
	RepeatDataPathTrailingResource(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error)
	// This method echoes the ComplianceData request, using the HTTP PUT method.
	RepeatDataBodyPut(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error)
	// This method echoes the ComplianceData request, using the HTTP PATCH method.
	RepeatDataBodyPatch(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error)
	// This method requests an enum value from the server. Depending on the contents of EnumRequest, the enum value returned will be a known enum declared in the
	// .proto file, or a made-up enum value the is unknown to the client. To verify that clients can round-trip unknown enum vaues they receive, use the
	// response from this RPC as the request to VerifyEnum()
	//
	// The values of enums sent by the server when a known or unknown value is requested will be the same within a single Showcase server run (this is needed for
	// VerifyEnum() to work) but are not guaranteed to be the same across separate Showcase server runs.
	GetEnum(ctx context.Context, in *EnumRequest, opts ...grpc.CallOption) (*EnumResponse, error)
	// This method is used to verify that clients can round-trip enum values, which is particularly important for unknown enum values over REST. VerifyEnum()
	// verifies that its request, which is presumably the response that the client previously got to a GetEnum(), contains the correct data. If so, it responds
	// with the same EnumResponse; otherwise, the RPC errors.
	//
	// This works because the values of enums sent by the server when a known or unknown value is requested will be the same within a single Showcase server run,
	// although they are not guaranteed to be the same across separate Showcase server runs.
	VerifyEnum(ctx context.Context, in *EnumResponse, opts ...grpc.CallOption) (*EnumResponse, error)
}

type complianceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceClient(cc grpc.ClientConnInterface) ComplianceClient {
	return &complianceClient{cc}
}

func (c *complianceClient) RepeatDataBody(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error) {
	out := new(RepeatResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Compliance/RepeatDataBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) RepeatDataBodyInfo(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error) {
	out := new(RepeatResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Compliance/RepeatDataBodyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) RepeatDataQuery(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error) {
	out := new(RepeatResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Compliance/RepeatDataQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) RepeatDataSimplePath(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error) {
	out := new(RepeatResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Compliance/RepeatDataSimplePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) RepeatDataPathResource(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error) {
	out := new(RepeatResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Compliance/RepeatDataPathResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) RepeatDataPathTrailingResource(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error) {
	out := new(RepeatResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Compliance/RepeatDataPathTrailingResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) RepeatDataBodyPut(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error) {
	out := new(RepeatResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Compliance/RepeatDataBodyPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) RepeatDataBodyPatch(ctx context.Context, in *RepeatRequest, opts ...grpc.CallOption) (*RepeatResponse, error) {
	out := new(RepeatResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Compliance/RepeatDataBodyPatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) GetEnum(ctx context.Context, in *EnumRequest, opts ...grpc.CallOption) (*EnumResponse, error) {
	out := new(EnumResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Compliance/GetEnum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceClient) VerifyEnum(ctx context.Context, in *EnumResponse, opts ...grpc.CallOption) (*EnumResponse, error) {
	out := new(EnumResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Compliance/VerifyEnum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceServer is the server API for Compliance service.
type ComplianceServer interface {
	// This method echoes the ComplianceData request. This method exercises
	// sending the entire request object in the REST body.
	RepeatDataBody(context.Context, *RepeatRequest) (*RepeatResponse, error)
	// This method echoes the ComplianceData request. This method exercises
	// sending the a message-type field in the REST body. Per AIP-127, only
	// top-level, non-repeated fields can be sent this way.
	RepeatDataBodyInfo(context.Context, *RepeatRequest) (*RepeatResponse, error)
	// This method echoes the ComplianceData request. This method exercises
	// sending all request fields as query parameters.
	RepeatDataQuery(context.Context, *RepeatRequest) (*RepeatResponse, error)
	// This method echoes the ComplianceData request. This method exercises
	// sending some parameters as "simple" path variables (i.e., of the form
	// "/bar/{foo}" rather than "/{foo=bar/*}"), and the rest as query parameters.
	RepeatDataSimplePath(context.Context, *RepeatRequest) (*RepeatResponse, error)
	// Same as RepeatDataSimplePath, but with a path resource.
	RepeatDataPathResource(context.Context, *RepeatRequest) (*RepeatResponse, error)
	// Same as RepeatDataSimplePath, but with a trailing resource.
	RepeatDataPathTrailingResource(context.Context, *RepeatRequest) (*RepeatResponse, error)
	// This method echoes the ComplianceData request, using the HTTP PUT method.
	RepeatDataBodyPut(context.Context, *RepeatRequest) (*RepeatResponse, error)
	// This method echoes the ComplianceData request, using the HTTP PATCH method.
	RepeatDataBodyPatch(context.Context, *RepeatRequest) (*RepeatResponse, error)
	// This method requests an enum value from the server. Depending on the contents of EnumRequest, the enum value returned will be a known enum declared in the
	// .proto file, or a made-up enum value the is unknown to the client. To verify that clients can round-trip unknown enum vaues they receive, use the
	// response from this RPC as the request to VerifyEnum()
	//
	// The values of enums sent by the server when a known or unknown value is requested will be the same within a single Showcase server run (this is needed for
	// VerifyEnum() to work) but are not guaranteed to be the same across separate Showcase server runs.
	GetEnum(context.Context, *EnumRequest) (*EnumResponse, error)
	// This method is used to verify that clients can round-trip enum values, which is particularly important for unknown enum values over REST. VerifyEnum()
	// verifies that its request, which is presumably the response that the client previously got to a GetEnum(), contains the correct data. If so, it responds
	// with the same EnumResponse; otherwise, the RPC errors.
	//
	// This works because the values of enums sent by the server when a known or unknown value is requested will be the same within a single Showcase server run,
	// although they are not guaranteed to be the same across separate Showcase server runs.
	VerifyEnum(context.Context, *EnumResponse) (*EnumResponse, error)
}

// UnimplementedComplianceServer can be embedded to have forward compatible implementations.
type UnimplementedComplianceServer struct {
}

func (*UnimplementedComplianceServer) RepeatDataBody(context.Context, *RepeatRequest) (*RepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatDataBody not implemented")
}
func (*UnimplementedComplianceServer) RepeatDataBodyInfo(context.Context, *RepeatRequest) (*RepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatDataBodyInfo not implemented")
}
func (*UnimplementedComplianceServer) RepeatDataQuery(context.Context, *RepeatRequest) (*RepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatDataQuery not implemented")
}
func (*UnimplementedComplianceServer) RepeatDataSimplePath(context.Context, *RepeatRequest) (*RepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatDataSimplePath not implemented")
}
func (*UnimplementedComplianceServer) RepeatDataPathResource(context.Context, *RepeatRequest) (*RepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatDataPathResource not implemented")
}
func (*UnimplementedComplianceServer) RepeatDataPathTrailingResource(context.Context, *RepeatRequest) (*RepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatDataPathTrailingResource not implemented")
}
func (*UnimplementedComplianceServer) RepeatDataBodyPut(context.Context, *RepeatRequest) (*RepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatDataBodyPut not implemented")
}
func (*UnimplementedComplianceServer) RepeatDataBodyPatch(context.Context, *RepeatRequest) (*RepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatDataBodyPatch not implemented")
}
func (*UnimplementedComplianceServer) GetEnum(context.Context, *EnumRequest) (*EnumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnum not implemented")
}
func (*UnimplementedComplianceServer) VerifyEnum(context.Context, *EnumResponse) (*EnumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEnum not implemented")
}

func RegisterComplianceServer(s *grpc.Server, srv ComplianceServer) {
	s.RegisterService(&_Compliance_serviceDesc, srv)
}

func _Compliance_RepeatDataBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).RepeatDataBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Compliance/RepeatDataBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).RepeatDataBody(ctx, req.(*RepeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_RepeatDataBodyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).RepeatDataBodyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Compliance/RepeatDataBodyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).RepeatDataBodyInfo(ctx, req.(*RepeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_RepeatDataQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).RepeatDataQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Compliance/RepeatDataQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).RepeatDataQuery(ctx, req.(*RepeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_RepeatDataSimplePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).RepeatDataSimplePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Compliance/RepeatDataSimplePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).RepeatDataSimplePath(ctx, req.(*RepeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_RepeatDataPathResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).RepeatDataPathResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Compliance/RepeatDataPathResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).RepeatDataPathResource(ctx, req.(*RepeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_RepeatDataPathTrailingResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).RepeatDataPathTrailingResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Compliance/RepeatDataPathTrailingResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).RepeatDataPathTrailingResource(ctx, req.(*RepeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_RepeatDataBodyPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).RepeatDataBodyPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Compliance/RepeatDataBodyPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).RepeatDataBodyPut(ctx, req.(*RepeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_RepeatDataBodyPatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).RepeatDataBodyPatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Compliance/RepeatDataBodyPatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).RepeatDataBodyPatch(ctx, req.(*RepeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_GetEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).GetEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Compliance/GetEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).GetEnum(ctx, req.(*EnumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compliance_VerifyEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServer).VerifyEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Compliance/VerifyEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServer).VerifyEnum(ctx, req.(*EnumResponse))
	}
	return interceptor(ctx, in, info, handler)
}

var _Compliance_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.showcase.v1beta1.Compliance",
	HandlerType: (*ComplianceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RepeatDataBody",
			Handler:    _Compliance_RepeatDataBody_Handler,
		},
		{
			MethodName: "RepeatDataBodyInfo",
			Handler:    _Compliance_RepeatDataBodyInfo_Handler,
		},
		{
			MethodName: "RepeatDataQuery",
			Handler:    _Compliance_RepeatDataQuery_Handler,
		},
		{
			MethodName: "RepeatDataSimplePath",
			Handler:    _Compliance_RepeatDataSimplePath_Handler,
		},
		{
			MethodName: "RepeatDataPathResource",
			Handler:    _Compliance_RepeatDataPathResource_Handler,
		},
		{
			MethodName: "RepeatDataPathTrailingResource",
			Handler:    _Compliance_RepeatDataPathTrailingResource_Handler,
		},
		{
			MethodName: "RepeatDataBodyPut",
			Handler:    _Compliance_RepeatDataBodyPut_Handler,
		},
		{
			MethodName: "RepeatDataBodyPatch",
			Handler:    _Compliance_RepeatDataBodyPatch_Handler,
		},
		{
			MethodName: "GetEnum",
			Handler:    _Compliance_GetEnum_Handler,
		},
		{
			MethodName: "VerifyEnum",
			Handler:    _Compliance_VerifyEnum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/showcase/v1beta1/compliance.proto",
}
