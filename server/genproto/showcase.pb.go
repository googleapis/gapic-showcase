// Code generated by protoc-gen-go. DO NOT EDIT.
// source: showcase.proto

/*
Package google_showcase_v1 is a generated protocol buffer package.

It is generated from these files:
	showcase.proto

It has these top-level messages:
	EchoRequest
	EchoResponse
	ExpandRequest
	TimeoutRequest
	TimeoutResponse
	SetupRetryRequest
	RetryId
	LongrunningRequest
	LongrunningMetadata
	LongrunningResponse
	PaginationRequest
	PaginationResponse
	ParameterFlatteningMessage
	ResourceNameMessage
*/
package google_showcase_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_longrunning "google.golang.org/genproto/googleapis/longrunning"
import google_protobuf3 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf4 "github.com/golang/protobuf/ptypes/timestamp"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message used for the Echo, Collect and Chat methods. If content
// is set in this message then the request will succeed. If a status is
type EchoRequest struct {
	// Types that are valid to be assigned to Response:
	//	*EchoRequest_Content
	//	*EchoRequest_Error
	Response isEchoRequest_Response `protobuf_oneof:"response"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (m *EchoRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isEchoRequest_Response interface {
	isEchoRequest_Response()
}

type EchoRequest_Content struct {
	Content string `protobuf:"bytes,1,opt,name=content,oneof"`
}
type EchoRequest_Error struct {
	Error *google_rpc.Status `protobuf:"bytes,2,opt,name=error,oneof"`
}

func (*EchoRequest_Content) isEchoRequest_Response() {}
func (*EchoRequest_Error) isEchoRequest_Response()   {}

func (m *EchoRequest) GetResponse() isEchoRequest_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *EchoRequest) GetContent() string {
	if x, ok := m.GetResponse().(*EchoRequest_Content); ok {
		return x.Content
	}
	return ""
}

func (m *EchoRequest) GetError() *google_rpc.Status {
	if x, ok := m.GetResponse().(*EchoRequest_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EchoRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EchoRequest_OneofMarshaler, _EchoRequest_OneofUnmarshaler, _EchoRequest_OneofSizer, []interface{}{
		(*EchoRequest_Content)(nil),
		(*EchoRequest_Error)(nil),
	}
}

func _EchoRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EchoRequest)
	// response
	switch x := m.Response.(type) {
	case *EchoRequest_Content:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Content)
	case *EchoRequest_Error:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EchoRequest.Response has unexpected type %T", x)
	}
	return nil
}

func _EchoRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EchoRequest)
	switch tag {
	case 1: // response.content
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Response = &EchoRequest_Content{x}
		return true, err
	case 2: // response.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_rpc.Status)
		err := b.DecodeMessage(msg)
		m.Response = &EchoRequest_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EchoRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EchoRequest)
	// response
	switch x := m.Response.(type) {
	case *EchoRequest_Content:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Content)))
		n += len(x.Content)
	case *EchoRequest_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The response message for the EchoService methods.
type EchoResponse struct {
	// The content specified in the request.
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *EchoResponse) Reset()                    { *m = EchoResponse{} }
func (m *EchoResponse) String() string            { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()               {}
func (*EchoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EchoResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// The request message for the Expand method.
type ExpandRequest struct {
	// The content that will be split into words and returned on the stream.
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	// The error that is thrown after all words are sent on the stream.
	Error *google_rpc.Status `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *ExpandRequest) Reset()                    { *m = ExpandRequest{} }
func (m *ExpandRequest) String() string            { return proto.CompactTextString(m) }
func (*ExpandRequest) ProtoMessage()               {}
func (*ExpandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExpandRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ExpandRequest) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// The request for Showcase Timeout method.
type TimeoutRequest struct {
	// The amount of time to wait before returning a response.
	ResponseDelay *google_protobuf3.Duration `protobuf:"bytes,1,opt,name=response_delay,json=responseDelay" json:"response_delay,omitempty"`
	// Types that are valid to be assigned to Response:
	//	*TimeoutRequest_Error
	//	*TimeoutRequest_Success
	Response isTimeoutRequest_Response `protobuf_oneof:"response"`
}

func (m *TimeoutRequest) Reset()                    { *m = TimeoutRequest{} }
func (m *TimeoutRequest) String() string            { return proto.CompactTextString(m) }
func (*TimeoutRequest) ProtoMessage()               {}
func (*TimeoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isTimeoutRequest_Response interface {
	isTimeoutRequest_Response()
}

type TimeoutRequest_Error struct {
	Error *google_rpc.Status `protobuf:"bytes,2,opt,name=error,oneof"`
}
type TimeoutRequest_Success struct {
	Success *TimeoutResponse `protobuf:"bytes,3,opt,name=success,oneof"`
}

func (*TimeoutRequest_Error) isTimeoutRequest_Response()   {}
func (*TimeoutRequest_Success) isTimeoutRequest_Response() {}

func (m *TimeoutRequest) GetResponse() isTimeoutRequest_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *TimeoutRequest) GetResponseDelay() *google_protobuf3.Duration {
	if m != nil {
		return m.ResponseDelay
	}
	return nil
}

func (m *TimeoutRequest) GetError() *google_rpc.Status {
	if x, ok := m.GetResponse().(*TimeoutRequest_Error); ok {
		return x.Error
	}
	return nil
}

func (m *TimeoutRequest) GetSuccess() *TimeoutResponse {
	if x, ok := m.GetResponse().(*TimeoutRequest_Success); ok {
		return x.Success
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TimeoutRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TimeoutRequest_OneofMarshaler, _TimeoutRequest_OneofUnmarshaler, _TimeoutRequest_OneofSizer, []interface{}{
		(*TimeoutRequest_Error)(nil),
		(*TimeoutRequest_Success)(nil),
	}
}

func _TimeoutRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TimeoutRequest)
	// response
	switch x := m.Response.(type) {
	case *TimeoutRequest_Error:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *TimeoutRequest_Success:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TimeoutRequest.Response has unexpected type %T", x)
	}
	return nil
}

func _TimeoutRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TimeoutRequest)
	switch tag {
	case 2: // response.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_rpc.Status)
		err := b.DecodeMessage(msg)
		m.Response = &TimeoutRequest_Error{msg}
		return true, err
	case 3: // response.success
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TimeoutResponse)
		err := b.DecodeMessage(msg)
		m.Response = &TimeoutRequest_Success{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TimeoutRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TimeoutRequest)
	// response
	switch x := m.Response.(type) {
	case *TimeoutRequest_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TimeoutRequest_Success:
		s := proto.Size(x.Success)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The response for Showcase Timeout method.
type TimeoutResponse struct {
	// This content can contain anything, the server will not depend on a value
	// here.
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *TimeoutResponse) Reset()                    { *m = TimeoutResponse{} }
func (m *TimeoutResponse) String() string            { return proto.CompactTextString(m) }
func (*TimeoutResponse) ProtoMessage()               {}
func (*TimeoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TimeoutResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// The request for the Showcase SetupRetry method.
type SetupRetryRequest struct {
	// The server will respond in the order that is given in this field.
	Responses []*google_rpc.Status `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *SetupRetryRequest) Reset()                    { *m = SetupRetryRequest{} }
func (m *SetupRetryRequest) String() string            { return proto.CompactTextString(m) }
func (*SetupRetryRequest) ProtoMessage()               {}
func (*SetupRetryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SetupRetryRequest) GetResponses() []*google_rpc.Status {
	if m != nil {
		return m.Responses
	}
	return nil
}

// The ID which a given list of responses will be bound to.
type RetryId struct {
	// An ID which will the given list of responses will be bound to on the
	// server.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RetryId) Reset()                    { *m = RetryId{} }
func (m *RetryId) String() string            { return proto.CompactTextString(m) }
func (*RetryId) ProtoMessage()               {}
func (*RetryId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RetryId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// The request for the Showcase Longrunning method.
type LongrunningRequest struct {
	// The time after which this operation will succeed. If, upon the first,
	// the time has passed, the initial response will return a completed
	// operation.
	CompletionTime *google_protobuf4.Timestamp `protobuf:"bytes,1,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
	// Types that are valid to be assigned to Response:
	//	*LongrunningRequest_Error
	//	*LongrunningRequest_Success
	Response isLongrunningRequest_Response `protobuf_oneof:"response"`
}

func (m *LongrunningRequest) Reset()                    { *m = LongrunningRequest{} }
func (m *LongrunningRequest) String() string            { return proto.CompactTextString(m) }
func (*LongrunningRequest) ProtoMessage()               {}
func (*LongrunningRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isLongrunningRequest_Response interface {
	isLongrunningRequest_Response()
}

type LongrunningRequest_Error struct {
	Error *google_rpc.Status `protobuf:"bytes,2,opt,name=error,oneof"`
}
type LongrunningRequest_Success struct {
	Success *LongrunningResponse `protobuf:"bytes,3,opt,name=success,oneof"`
}

func (*LongrunningRequest_Error) isLongrunningRequest_Response()   {}
func (*LongrunningRequest_Success) isLongrunningRequest_Response() {}

func (m *LongrunningRequest) GetResponse() isLongrunningRequest_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *LongrunningRequest) GetCompletionTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.CompletionTime
	}
	return nil
}

func (m *LongrunningRequest) GetError() *google_rpc.Status {
	if x, ok := m.GetResponse().(*LongrunningRequest_Error); ok {
		return x.Error
	}
	return nil
}

func (m *LongrunningRequest) GetSuccess() *LongrunningResponse {
	if x, ok := m.GetResponse().(*LongrunningRequest_Success); ok {
		return x.Success
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LongrunningRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LongrunningRequest_OneofMarshaler, _LongrunningRequest_OneofUnmarshaler, _LongrunningRequest_OneofSizer, []interface{}{
		(*LongrunningRequest_Error)(nil),
		(*LongrunningRequest_Success)(nil),
	}
}

func _LongrunningRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LongrunningRequest)
	// response
	switch x := m.Response.(type) {
	case *LongrunningRequest_Error:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *LongrunningRequest_Success:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LongrunningRequest.Response has unexpected type %T", x)
	}
	return nil
}

func _LongrunningRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LongrunningRequest)
	switch tag {
	case 2: // response.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_rpc.Status)
		err := b.DecodeMessage(msg)
		m.Response = &LongrunningRequest_Error{msg}
		return true, err
	case 3: // response.success
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LongrunningResponse)
		err := b.DecodeMessage(msg)
		m.Response = &LongrunningRequest_Success{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LongrunningRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LongrunningRequest)
	// response
	switch x := m.Response.(type) {
	case *LongrunningRequest_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LongrunningRequest_Success:
		s := proto.Size(x.Success)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The metadata for the Showcase Longrunning method.
type LongrunningMetadata struct {
	// The amount of time remaining on this operation.
	TimeRemaining *google_protobuf3.Duration `protobuf:"bytes,1,opt,name=time_remaining,json=timeRemaining" json:"time_remaining,omitempty"`
}

func (m *LongrunningMetadata) Reset()                    { *m = LongrunningMetadata{} }
func (m *LongrunningMetadata) String() string            { return proto.CompactTextString(m) }
func (*LongrunningMetadata) ProtoMessage()               {}
func (*LongrunningMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LongrunningMetadata) GetTimeRemaining() *google_protobuf3.Duration {
	if m != nil {
		return m.TimeRemaining
	}
	return nil
}

// The final operation response for the Showcase Longrunning
// method.
type LongrunningResponse struct {
	// The response that will be returned for a successful operation.
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *LongrunningResponse) Reset()                    { *m = LongrunningResponse{} }
func (m *LongrunningResponse) String() string            { return proto.CompactTextString(m) }
func (*LongrunningResponse) ProtoMessage()               {}
func (*LongrunningResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *LongrunningResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// The request for the Showcase Pagination.
type PaginationRequest struct {
	// The maximum number that will be returned in the response.
	MaxResponse int32 `protobuf:"varint,1,opt,name=max_response,json=maxResponse" json:"max_response,omitempty"`
	// The amount of numbers to returned in the response.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// The position of the page to be returned. This will be a stringified int
	// that will signifiy where to start the page from. Anything other than
	// a stringified integer within the range of 0 and the max_response will
	// cause an error to be thrown. This value is a string as opposed to a int32
	// to follow general google api practices.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	// This field is used to show the client's ability to handle servers that
	// return a page that is larger the specified page size.
	PageSizeOverride int32 `protobuf:"varint,4,opt,name=page_size_override,json=pageSizeOverride" json:"page_size_override,omitempty"`
}

func (m *PaginationRequest) Reset()                    { *m = PaginationRequest{} }
func (m *PaginationRequest) String() string            { return proto.CompactTextString(m) }
func (*PaginationRequest) ProtoMessage()               {}
func (*PaginationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PaginationRequest) GetMaxResponse() int32 {
	if m != nil {
		return m.MaxResponse
	}
	return 0
}

func (m *PaginationRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PaginationRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *PaginationRequest) GetPageSizeOverride() int32 {
	if m != nil {
		return m.PageSizeOverride
	}
	return 0
}

// The response for the Showcase Pagination method.
type PaginationResponse struct {
	// An increasing list of responses starting at the value specified by the
	// page token. If the page token is empty, then this list will start at 0.
	Responses []int32 `protobuf:"varint,1,rep,packed,name=responses" json:"responses,omitempty"`
	// The next integer stringified.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *PaginationResponse) Reset()                    { *m = PaginationResponse{} }
func (m *PaginationResponse) String() string            { return proto.CompactTextString(m) }
func (*PaginationResponse) ProtoMessage()               {}
func (*PaginationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PaginationResponse) GetResponses() []int32 {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *PaginationResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// The request and response message for the Showcase ParameterFlattening.
type ParameterFlatteningMessage struct {
	// Simply a string for content.
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	// A list of strings to show how flattening affects repeated fields.
	RepeatedContent []string `protobuf:"bytes,2,rep,name=repeated_content,json=repeatedContent" json:"repeated_content,omitempty"`
	// A message to show flattenings that cause a message type to become a param.
	Nested *ParameterFlatteningMessage `protobuf:"bytes,3,opt,name=nested" json:"nested,omitempty"`
}

func (m *ParameterFlatteningMessage) Reset()                    { *m = ParameterFlatteningMessage{} }
func (m *ParameterFlatteningMessage) String() string            { return proto.CompactTextString(m) }
func (*ParameterFlatteningMessage) ProtoMessage()               {}
func (*ParameterFlatteningMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ParameterFlatteningMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ParameterFlatteningMessage) GetRepeatedContent() []string {
	if m != nil {
		return m.RepeatedContent
	}
	return nil
}

func (m *ParameterFlatteningMessage) GetNested() *ParameterFlatteningMessage {
	if m != nil {
		return m.Nested
	}
	return nil
}

// The request and response message for the Showcase ResourceName method.
type ResourceNameMessage struct {
	// This field will have a single template bound to it.
	SingleTemplate string `protobuf:"bytes,1,opt,name=single_template,json=singleTemplate" json:"single_template,omitempty"`
	// This field will be a oneof resource name with many templates bound to it.
	MultipleTemplates string `protobuf:"bytes,2,opt,name=multiple_templates,json=multipleTemplates" json:"multiple_templates,omitempty"`
}

func (m *ResourceNameMessage) Reset()                    { *m = ResourceNameMessage{} }
func (m *ResourceNameMessage) String() string            { return proto.CompactTextString(m) }
func (*ResourceNameMessage) ProtoMessage()               {}
func (*ResourceNameMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ResourceNameMessage) GetSingleTemplate() string {
	if m != nil {
		return m.SingleTemplate
	}
	return ""
}

func (m *ResourceNameMessage) GetMultipleTemplates() string {
	if m != nil {
		return m.MultipleTemplates
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "google.showcase.v1.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "google.showcase.v1.EchoResponse")
	proto.RegisterType((*ExpandRequest)(nil), "google.showcase.v1.ExpandRequest")
	proto.RegisterType((*TimeoutRequest)(nil), "google.showcase.v1.TimeoutRequest")
	proto.RegisterType((*TimeoutResponse)(nil), "google.showcase.v1.TimeoutResponse")
	proto.RegisterType((*SetupRetryRequest)(nil), "google.showcase.v1.SetupRetryRequest")
	proto.RegisterType((*RetryId)(nil), "google.showcase.v1.RetryId")
	proto.RegisterType((*LongrunningRequest)(nil), "google.showcase.v1.LongrunningRequest")
	proto.RegisterType((*LongrunningMetadata)(nil), "google.showcase.v1.LongrunningMetadata")
	proto.RegisterType((*LongrunningResponse)(nil), "google.showcase.v1.LongrunningResponse")
	proto.RegisterType((*PaginationRequest)(nil), "google.showcase.v1.PaginationRequest")
	proto.RegisterType((*PaginationResponse)(nil), "google.showcase.v1.PaginationResponse")
	proto.RegisterType((*ParameterFlatteningMessage)(nil), "google.showcase.v1.ParameterFlatteningMessage")
	proto.RegisterType((*ResourceNameMessage)(nil), "google.showcase.v1.ResourceNameMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Showcase service

type ShowcaseClient interface {
	// A method used to show unary methods. This method will return the message
	// that was given.
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// A method used to show server-side streaming methods. This method will
	// split the given content into words and will pass each word back through
	// the stream.
	Expand(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (Showcase_ExpandClient, error)
	// A method used to show client-side streaming methods. This method will
	// collect the contents given to it. When the stream is closed by the client,
	// this method will return the a concatenation of the strings passed to it.
	Collect(ctx context.Context, opts ...grpc.CallOption) (Showcase_CollectClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (Showcase_ChatClient, error)
	Timeout(ctx context.Context, in *TimeoutRequest, opts ...grpc.CallOption) (*TimeoutResponse, error)
	// This method is used to setup the Retry method. The given list of retry behavior
	// will be bound to an ID defined by the server. Subsequent Retry requests
	// of the given ID will respond with the behavior specified in this request.
	SetupRetry(ctx context.Context, in *SetupRetryRequest, opts ...grpc.CallOption) (*RetryId, error)
	// This method is used to show how a client handles errors that can be
	// retried. Requests to a given RetryId will respond in the way specified
	// in SetupRetry method.
	Retry(ctx context.Context, in *RetryId, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// This method is used to show how a client handles a long running operation.
	// Upon receiving a request, the server will create a new ID and mark that
	// the ID created will complete at the time denoted in the request. If the
	// completion time has already passed, the server will return a longrunning
	// operation that signifies a completed operation. Upon subsequent requests
	// to the operations mixin service, if the operation is incomplete, the
	// the server will return metadata denoting the percent that the operation
	// is complete, else the server will return a completed operation that will
	// either denote that the operation has succeeded or failed.
	Longrunning(ctx context.Context, in *LongrunningRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error)
	// This method is used to show how a client will handle a method that lists
	// responses in a paginated method. The request will specify an ID and the
	// maximum number of responses to return. If the ID has not been seen before
	// the server will mark the ID specified and the maximum number to be
	// returned. The page token will be a stringified integer denoting the
	// the number to start the page at.
	Pagination(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*PaginationResponse, error)
	// This method is used to show how a client will handle configuration to
	// flatten a request. The server will simply echo the request and
	ParameterFlattening(ctx context.Context, in *ParameterFlatteningMessage, opts ...grpc.CallOption) (*ParameterFlatteningMessage, error)
	// This method is used to show how a client will handle request strings that
	// are configured to follow a certain pattern or set of patterns. The server
	// will simply echo the request.
	ResourceName(ctx context.Context, in *ResourceNameMessage, opts ...grpc.CallOption) (*ResourceNameMessage, error)
}

type showcaseClient struct {
	cc *grpc.ClientConn
}

func NewShowcaseClient(cc *grpc.ClientConn) ShowcaseClient {
	return &showcaseClient{cc}
}

func (c *showcaseClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/google.showcase.v1.Showcase/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcaseClient) Expand(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (Showcase_ExpandClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Showcase_serviceDesc.Streams[0], c.cc, "/google.showcase.v1.Showcase/Expand", opts...)
	if err != nil {
		return nil, err
	}
	x := &showcaseExpandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Showcase_ExpandClient interface {
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type showcaseExpandClient struct {
	grpc.ClientStream
}

func (x *showcaseExpandClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *showcaseClient) Collect(ctx context.Context, opts ...grpc.CallOption) (Showcase_CollectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Showcase_serviceDesc.Streams[1], c.cc, "/google.showcase.v1.Showcase/Collect", opts...)
	if err != nil {
		return nil, err
	}
	x := &showcaseCollectClient{stream}
	return x, nil
}

type Showcase_CollectClient interface {
	Send(*EchoRequest) error
	CloseAndRecv() (*EchoResponse, error)
	grpc.ClientStream
}

type showcaseCollectClient struct {
	grpc.ClientStream
}

func (x *showcaseCollectClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *showcaseCollectClient) CloseAndRecv() (*EchoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *showcaseClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Showcase_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Showcase_serviceDesc.Streams[2], c.cc, "/google.showcase.v1.Showcase/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &showcaseChatClient{stream}
	return x, nil
}

type Showcase_ChatClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type showcaseChatClient struct {
	grpc.ClientStream
}

func (x *showcaseChatClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *showcaseChatClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *showcaseClient) Timeout(ctx context.Context, in *TimeoutRequest, opts ...grpc.CallOption) (*TimeoutResponse, error) {
	out := new(TimeoutResponse)
	err := grpc.Invoke(ctx, "/google.showcase.v1.Showcase/Timeout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcaseClient) SetupRetry(ctx context.Context, in *SetupRetryRequest, opts ...grpc.CallOption) (*RetryId, error) {
	out := new(RetryId)
	err := grpc.Invoke(ctx, "/google.showcase.v1.Showcase/SetupRetry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcaseClient) Retry(ctx context.Context, in *RetryId, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/google.showcase.v1.Showcase/Retry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcaseClient) Longrunning(ctx context.Context, in *LongrunningRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error) {
	out := new(google_longrunning.Operation)
	err := grpc.Invoke(ctx, "/google.showcase.v1.Showcase/Longrunning", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcaseClient) Pagination(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*PaginationResponse, error) {
	out := new(PaginationResponse)
	err := grpc.Invoke(ctx, "/google.showcase.v1.Showcase/Pagination", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcaseClient) ParameterFlattening(ctx context.Context, in *ParameterFlatteningMessage, opts ...grpc.CallOption) (*ParameterFlatteningMessage, error) {
	out := new(ParameterFlatteningMessage)
	err := grpc.Invoke(ctx, "/google.showcase.v1.Showcase/ParameterFlattening", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcaseClient) ResourceName(ctx context.Context, in *ResourceNameMessage, opts ...grpc.CallOption) (*ResourceNameMessage, error) {
	out := new(ResourceNameMessage)
	err := grpc.Invoke(ctx, "/google.showcase.v1.Showcase/ResourceName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Showcase service

type ShowcaseServer interface {
	// A method used to show unary methods. This method will return the message
	// that was given.
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// A method used to show server-side streaming methods. This method will
	// split the given content into words and will pass each word back through
	// the stream.
	Expand(*ExpandRequest, Showcase_ExpandServer) error
	// A method used to show client-side streaming methods. This method will
	// collect the contents given to it. When the stream is closed by the client,
	// this method will return the a concatenation of the strings passed to it.
	Collect(Showcase_CollectServer) error
	Chat(Showcase_ChatServer) error
	Timeout(context.Context, *TimeoutRequest) (*TimeoutResponse, error)
	// This method is used to setup the Retry method. The given list of retry behavior
	// will be bound to an ID defined by the server. Subsequent Retry requests
	// of the given ID will respond with the behavior specified in this request.
	SetupRetry(context.Context, *SetupRetryRequest) (*RetryId, error)
	// This method is used to show how a client handles errors that can be
	// retried. Requests to a given RetryId will respond in the way specified
	// in SetupRetry method.
	Retry(context.Context, *RetryId) (*google_protobuf2.Empty, error)
	// This method is used to show how a client handles a long running operation.
	// Upon receiving a request, the server will create a new ID and mark that
	// the ID created will complete at the time denoted in the request. If the
	// completion time has already passed, the server will return a longrunning
	// operation that signifies a completed operation. Upon subsequent requests
	// to the operations mixin service, if the operation is incomplete, the
	// the server will return metadata denoting the percent that the operation
	// is complete, else the server will return a completed operation that will
	// either denote that the operation has succeeded or failed.
	Longrunning(context.Context, *LongrunningRequest) (*google_longrunning.Operation, error)
	// This method is used to show how a client will handle a method that lists
	// responses in a paginated method. The request will specify an ID and the
	// maximum number of responses to return. If the ID has not been seen before
	// the server will mark the ID specified and the maximum number to be
	// returned. The page token will be a stringified integer denoting the
	// the number to start the page at.
	Pagination(context.Context, *PaginationRequest) (*PaginationResponse, error)
	// This method is used to show how a client will handle configuration to
	// flatten a request. The server will simply echo the request and
	ParameterFlattening(context.Context, *ParameterFlatteningMessage) (*ParameterFlatteningMessage, error)
	// This method is used to show how a client will handle request strings that
	// are configured to follow a certain pattern or set of patterns. The server
	// will simply echo the request.
	ResourceName(context.Context, *ResourceNameMessage) (*ResourceNameMessage, error)
}

func RegisterShowcaseServer(s *grpc.Server, srv ShowcaseServer) {
	s.RegisterService(&_Showcase_serviceDesc, srv)
}

func _Showcase_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcaseServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1.Showcase/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcaseServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Showcase_Expand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExpandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShowcaseServer).Expand(m, &showcaseExpandServer{stream})
}

type Showcase_ExpandServer interface {
	Send(*EchoResponse) error
	grpc.ServerStream
}

type showcaseExpandServer struct {
	grpc.ServerStream
}

func (x *showcaseExpandServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Showcase_Collect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShowcaseServer).Collect(&showcaseCollectServer{stream})
}

type Showcase_CollectServer interface {
	SendAndClose(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type showcaseCollectServer struct {
	grpc.ServerStream
}

func (x *showcaseCollectServer) SendAndClose(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *showcaseCollectServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Showcase_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShowcaseServer).Chat(&showcaseChatServer{stream})
}

type Showcase_ChatServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type showcaseChatServer struct {
	grpc.ServerStream
}

func (x *showcaseChatServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *showcaseChatServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Showcase_Timeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcaseServer).Timeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1.Showcase/Timeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcaseServer).Timeout(ctx, req.(*TimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Showcase_SetupRetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupRetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcaseServer).SetupRetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1.Showcase/SetupRetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcaseServer).SetupRetry(ctx, req.(*SetupRetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Showcase_Retry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcaseServer).Retry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1.Showcase/Retry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcaseServer).Retry(ctx, req.(*RetryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Showcase_Longrunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongrunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcaseServer).Longrunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1.Showcase/Longrunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcaseServer).Longrunning(ctx, req.(*LongrunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Showcase_Pagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcaseServer).Pagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1.Showcase/Pagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcaseServer).Pagination(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Showcase_ParameterFlattening_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParameterFlatteningMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcaseServer).ParameterFlattening(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1.Showcase/ParameterFlattening",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcaseServer).ParameterFlattening(ctx, req.(*ParameterFlatteningMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Showcase_ResourceName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceNameMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcaseServer).ResourceName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1.Showcase/ResourceName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcaseServer).ResourceName(ctx, req.(*ResourceNameMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Showcase_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.showcase.v1.Showcase",
	HandlerType: (*ShowcaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Showcase_Echo_Handler,
		},
		{
			MethodName: "Timeout",
			Handler:    _Showcase_Timeout_Handler,
		},
		{
			MethodName: "SetupRetry",
			Handler:    _Showcase_SetupRetry_Handler,
		},
		{
			MethodName: "Retry",
			Handler:    _Showcase_Retry_Handler,
		},
		{
			MethodName: "Longrunning",
			Handler:    _Showcase_Longrunning_Handler,
		},
		{
			MethodName: "Pagination",
			Handler:    _Showcase_Pagination_Handler,
		},
		{
			MethodName: "ParameterFlattening",
			Handler:    _Showcase_ParameterFlattening_Handler,
		},
		{
			MethodName: "ResourceName",
			Handler:    _Showcase_ResourceName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Expand",
			Handler:       _Showcase_Expand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Collect",
			Handler:       _Showcase_Collect_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _Showcase_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "showcase.proto",
}

func init() { proto.RegisterFile("showcase.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5d, 0x6f, 0xdb, 0x46,
	0x10, 0x14, 0x65, 0xcb, 0xb2, 0x56, 0xb6, 0x14, 0xaf, 0x81, 0x56, 0xa1, 0x9b, 0x46, 0x61, 0x50,
	0x5b, 0xfd, 0x92, 0x5c, 0xf7, 0xbd, 0x2d, 0xaa, 0x38, 0x48, 0xd1, 0x0f, 0xbb, 0x94, 0xd0, 0x02,
	0x05, 0x0a, 0xe1, 0x4c, 0x6e, 0x65, 0xa2, 0x24, 0x8f, 0xe5, 0x1d, 0x13, 0x3b, 0xbf, 0xa6, 0xaf,
	0xfd, 0x2d, 0x79, 0xef, 0xef, 0x09, 0x48, 0xde, 0x49, 0xb4, 0x44, 0xcb, 0x32, 0xe0, 0x47, 0xee,
	0xcd, 0xce, 0x0e, 0x87, 0x7b, 0x03, 0x42, 0x4b, 0x5c, 0xf2, 0x37, 0x0e, 0x13, 0xd4, 0x8f, 0x62,
	0x2e, 0x39, 0xe2, 0x94, 0xf3, 0xa9, 0x4f, 0xfd, 0x59, 0xf9, 0xf5, 0x57, 0xe6, 0xf3, 0xbc, 0x36,
	0xf0, 0x79, 0x38, 0x8d, 0x93, 0x30, 0xf4, 0xc2, 0xe9, 0x80, 0x47, 0x14, 0x33, 0xe9, 0xf1, 0x50,
	0xe4, 0x8d, 0xe6, 0xc7, 0x0a, 0x94, 0x3d, 0x5d, 0x24, 0x7f, 0x0d, 0xdc, 0x24, 0x07, 0xa8, 0xf3,
	0x83, 0xc5, 0x73, 0x0a, 0x22, 0x79, 0xad, 0x0e, 0x9f, 0x2e, 0x1e, 0x4a, 0x2f, 0x20, 0x21, 0x59,
	0x10, 0x29, 0xc0, 0x87, 0x0a, 0x10, 0x47, 0xce, 0x40, 0x48, 0x26, 0x13, 0x35, 0xd6, 0x62, 0xd0,
	0x3c, 0x75, 0x2e, 0xb9, 0x4d, 0xff, 0x24, 0x24, 0x24, 0x9a, 0x50, 0x77, 0x78, 0x28, 0x29, 0x94,
	0x1d, 0xa3, 0x6b, 0xf4, 0x1a, 0xaf, 0x2a, 0xb6, 0x2e, 0xe0, 0x67, 0x50, 0xa3, 0x38, 0xe6, 0x71,
	0xa7, 0xda, 0x35, 0x7a, 0xcd, 0x13, 0xec, 0xab, 0x57, 0x8d, 0x23, 0xa7, 0x3f, 0xca, 0x38, 0x5f,
	0x55, 0xec, 0x1c, 0xf2, 0x3d, 0xc0, 0x76, 0x4c, 0x22, 0xe2, 0xa1, 0x20, 0xab, 0x07, 0x3b, 0xf9,
	0x88, 0xfc, 0x19, 0x3b, 0x0b, 0x33, 0x66, 0x13, 0xac, 0x11, 0xec, 0x9e, 0x5e, 0x45, 0x2c, 0x74,
	0xb5, 0x9c, 0x5b, 0xa1, 0xd8, 0xbb, 0x53, 0x8c, 0x92, 0x62, 0xbd, 0x33, 0xa0, 0x35, 0xf6, 0x02,
	0xe2, 0x89, 0xd4, 0xb4, 0xdf, 0x41, 0x4b, 0xab, 0x9b, 0xb8, 0xe4, 0xb3, 0xeb, 0x8c, 0xbd, 0x79,
	0xf2, 0x58, 0xb3, 0x68, 0x1f, 0xfb, 0x2f, 0xd4, 0x47, 0xb0, 0x77, 0x75, 0xc3, 0x8b, 0x14, 0x7f,
	0x1f, 0x2f, 0xf0, 0x5b, 0xa8, 0x8b, 0xc4, 0x71, 0x48, 0x88, 0xce, 0x46, 0x86, 0x7e, 0xde, 0x5f,
	0x5e, 0x92, 0xfe, 0x4c, 0x62, 0x3e, 0x26, 0x35, 0x5e, 0x75, 0xdd, 0x30, 0xf3, 0x73, 0x68, 0x2f,
	0x20, 0x57, 0xf8, 0x79, 0x0a, 0x7b, 0x23, 0x92, 0x49, 0x64, 0x93, 0x8c, 0xaf, 0xf5, 0xcb, 0x1f,
	0x43, 0x43, 0xb3, 0x89, 0x8e, 0xd1, 0xdd, 0xb8, 0xc5, 0xbd, 0x39, 0xc8, 0x7a, 0x0c, 0xf5, 0x8c,
	0xe1, 0x07, 0x17, 0x5b, 0x50, 0xf5, 0x5c, 0x35, 0xa6, 0xea, 0xb9, 0xd6, 0xff, 0x06, 0xe0, 0x4f,
	0xf3, 0xb5, 0xd6, 0x33, 0x86, 0xd0, 0x76, 0x78, 0x10, 0xf9, 0x94, 0x7a, 0x37, 0x49, 0x97, 0x51,
	0x39, 0x6c, 0x2e, 0x39, 0x3c, 0xd6, 0x9b, 0x6a, 0xb7, 0xe6, 0x2d, 0x69, 0xf1, 0x5e, 0x1e, 0x0f,
	0x17, 0x3d, 0x3e, 0x2a, 0xf3, 0xf8, 0x86, 0xd2, 0xd5, 0x3e, 0xff, 0x0e, 0xfb, 0x05, 0xf4, 0xcf,
	0x24, 0x99, 0xcb, 0x24, 0x4b, 0x37, 0x27, 0x7d, 0x9b, 0x49, 0x4c, 0x01, 0xf3, 0xd2, 0x93, 0x35,
	0x36, 0x27, 0x6d, 0xb0, 0x35, 0xde, 0x1a, 0xdc, 0x20, 0x5e, 0xe3, 0x23, 0xfe, 0x6b, 0xc0, 0xde,
	0x39, 0x9b, 0x7a, 0x61, 0x4e, 0xa7, 0x1c, 0x7e, 0x06, 0x3b, 0x01, 0xbb, 0x9a, 0x68, 0xbd, 0x59,
	0x53, 0xcd, 0x6e, 0x06, 0xec, 0x6a, 0x46, 0x79, 0x00, 0x8d, 0x88, 0x4d, 0x69, 0x22, 0xbc, 0xb7,
	0x94, 0x79, 0x58, 0xb3, 0xb7, 0xd3, 0xc2, 0xc8, 0x7b, 0x4b, 0xf8, 0x04, 0x20, 0x3b, 0x94, 0xfc,
	0x6f, 0x0a, 0x33, 0xcf, 0x1a, 0x76, 0x06, 0x1f, 0xa7, 0x05, 0xfc, 0x02, 0x70, 0xd6, 0x3b, 0xe1,
	0xaf, 0x29, 0x8e, 0x3d, 0x97, 0x3a, 0x9b, 0x19, 0xc9, 0x23, 0x4d, 0x72, 0xa6, 0xea, 0xd6, 0x1f,
	0x80, 0x45, 0x85, 0x6a, 0xfe, 0x47, 0x8b, 0x8b, 0x56, 0x2b, 0x2c, 0x15, 0x1e, 0x42, 0x3b, 0xa4,
	0x2b, 0x39, 0x29, 0xa8, 0xa8, 0x66, 0x2a, 0x76, 0xd3, 0xf2, 0xb9, 0x56, 0x62, 0xfd, 0x67, 0x80,
	0x79, 0xce, 0x62, 0x16, 0x90, 0xa4, 0xf8, 0xa5, 0xcf, 0xa4, 0xa4, 0xfc, 0x8b, 0x08, 0xc1, 0xa6,
	0x2b, 0x7c, 0xc3, 0x4f, 0xe1, 0x51, 0x4c, 0x11, 0x31, 0x49, 0xee, 0x44, 0x43, 0xaa, 0xdd, 0x8d,
	0x5e, 0xc3, 0x6e, 0xeb, 0xfa, 0x50, 0x41, 0x5f, 0xc2, 0x56, 0x48, 0x42, 0x92, 0xab, 0x96, 0xa7,
	0x5f, 0xb6, 0x3c, 0xb7, 0x8b, 0xb0, 0x55, 0xb7, 0x15, 0xc0, 0xbe, 0x4d, 0x82, 0x27, 0xb1, 0x43,
	0xbf, 0xb0, 0x80, 0xb4, 0xc6, 0x23, 0x68, 0x0b, 0x2f, 0x9c, 0xfa, 0x34, 0x91, 0x14, 0x44, 0x3e,
	0x93, 0xa4, 0xb4, 0xb6, 0xf2, 0xf2, 0x58, 0x55, 0xf1, 0x4b, 0xc0, 0x20, 0xf1, 0xa5, 0x17, 0x15,
	0xa0, 0x42, 0xd9, 0xb2, 0xa7, 0x4f, 0x34, 0x5a, 0x9c, 0xbc, 0xab, 0xc3, 0xf6, 0x48, 0x29, 0xc4,
	0x1f, 0x61, 0x33, 0x4d, 0x59, 0x7c, 0x5a, 0xa6, 0xbd, 0x10, 0xf1, 0x66, 0xf7, 0x76, 0x80, 0xda,
	0xfd, 0x0a, 0xfe, 0x0a, 0x5b, 0x79, 0x10, 0xe3, 0xb3, 0x52, 0x74, 0x31, 0xa4, 0xd7, 0x21, 0x3c,
	0x36, 0xf0, 0x1c, 0xea, 0x43, 0xee, 0xfb, 0xe4, 0xc8, 0x07, 0x91, 0xd8, 0x33, 0xf0, 0x0c, 0x36,
	0x87, 0x97, 0xec, 0xa1, 0xe8, 0x8e, 0x0d, 0x1c, 0x43, 0x5d, 0x65, 0x2b, 0x5a, 0x2b, 0x23, 0x3a,
	0xa7, 0x5d, 0x27, 0xc6, 0xad, 0x0a, 0xda, 0x00, 0xf3, 0x10, 0xc6, 0x4f, 0xca, 0x9a, 0x96, 0x42,
	0xda, 0x3c, 0x28, 0x83, 0xa9, 0x10, 0xb6, 0x2a, 0xf8, 0x0d, 0xd4, 0x72, 0xba, 0x55, 0x38, 0xf3,
	0x83, 0xa5, 0x50, 0x3a, 0x4d, 0xff, 0x19, 0xac, 0x0a, 0xfe, 0x06, 0xcd, 0x42, 0x08, 0xe1, 0xe1,
	0x9d, 0x61, 0x99, 0xab, 0x7a, 0xa2, 0x71, 0x85, 0x3f, 0x99, 0xfe, 0x99, 0xfe, 0x93, 0xb1, 0x2a,
	0xf8, 0x27, 0xc0, 0x3c, 0x08, 0xca, 0xdf, 0x75, 0x29, 0xca, 0xcc, 0xc3, 0xbb, 0x60, 0x33, 0x2b,
	0xdf, 0xc0, 0x7e, 0xc9, 0x2d, 0xc4, 0x7b, 0x5e, 0x57, 0xf3, 0x9e, 0x78, 0xab, 0x82, 0x17, 0xb0,
	0x53, 0xbc, 0xd8, 0x78, 0x54, 0x6e, 0xfb, 0xd2, 0xd5, 0x37, 0xd7, 0x05, 0x5a, 0x95, 0x8b, 0xad,
	0xec, 0x2b, 0x7d, 0xfd, 0x3e, 0x00, 0x00, 0xff, 0xff, 0x13, 0xf1, 0x0d, 0x16, 0x52, 0x0a, 0x00,
	0x00,
}
