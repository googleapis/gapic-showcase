// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.1
// source: google/showcase/v1beta1/messaging.proto

package genproto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	errdetails "google.golang.org/genproto/googleapis/rpc/errdetails"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The action that triggered the blurb to be returned.
type StreamBlurbsResponse_Action int32

const (
	StreamBlurbsResponse_ACTION_UNSPECIFIED StreamBlurbsResponse_Action = 0
	// Specifies that the blurb was created.
	StreamBlurbsResponse_CREATE StreamBlurbsResponse_Action = 1
	// Specifies that the blurb was updated.
	StreamBlurbsResponse_UPDATE StreamBlurbsResponse_Action = 2
	// Specifies that the blurb was deleted.
	StreamBlurbsResponse_DELETE StreamBlurbsResponse_Action = 3
)

// Enum value maps for StreamBlurbsResponse_Action.
var (
	StreamBlurbsResponse_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "CREATE",
		2: "UPDATE",
		3: "DELETE",
	}
	StreamBlurbsResponse_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"CREATE":             1,
		"UPDATE":             2,
		"DELETE":             3,
	}
)

func (x StreamBlurbsResponse_Action) Enum() *StreamBlurbsResponse_Action {
	p := new(StreamBlurbsResponse_Action)
	*p = x
	return p
}

func (x StreamBlurbsResponse_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamBlurbsResponse_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_google_showcase_v1beta1_messaging_proto_enumTypes[0].Descriptor()
}

func (StreamBlurbsResponse_Action) Type() protoreflect.EnumType {
	return &file_google_showcase_v1beta1_messaging_proto_enumTypes[0]
}

func (x StreamBlurbsResponse_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamBlurbsResponse_Action.Descriptor instead.
func (StreamBlurbsResponse_Action) EnumDescriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{18, 0}
}

// A chat room.
type Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the chat room.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The human readable name of the chat room.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The description of the chat room.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The timestamp at which the room was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The latest timestamp at which the room was updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Room) Reset() {
	*x = Room{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{0}
}

func (x *Room) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Room) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Room) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Room) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Room) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The request message for the google.showcase.v1beta1.Messaging\CreateRoom
// method.
type CreateRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The room to create.
	Room *Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *CreateRoomRequest) Reset() {
	*x = CreateRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomRequest) ProtoMessage() {}

func (x *CreateRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomRequest.ProtoReflect.Descriptor instead.
func (*CreateRoomRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRoomRequest) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

// The request message for the google.showcase.v1beta1.Messaging\GetRoom
// method.
type GetRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the requested room.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRoomRequest) Reset() {
	*x = GetRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomRequest) ProtoMessage() {}

func (x *GetRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomRequest.ProtoReflect.Descriptor instead.
func (*GetRoomRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{2}
}

func (x *GetRoomRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request message for the google.showcase.v1beta1.Messaging\UpdateRoom
// method.
type UpdateRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The room to update.
	Room *Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	// The field mask to determine wich fields are to be updated. If empty, the
	// server will assume all fields are to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRoomRequest) Reset() {
	*x = UpdateRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoomRequest) ProtoMessage() {}

func (x *UpdateRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoomRequest.ProtoReflect.Descriptor instead.
func (*UpdateRoomRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateRoomRequest) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *UpdateRoomRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// The request message for the google.showcase.v1beta1.Messaging\DeleteRoom
// method.
type DeleteRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the requested room.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRoomRequest) Reset() {
	*x = DeleteRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoomRequest) ProtoMessage() {}

func (x *DeleteRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoomRequest.ProtoReflect.Descriptor instead.
func (*DeleteRoomRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRoomRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request message for the google.showcase.v1beta1.Messaging\ListRooms
// method.
type ListRoomsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of rooms return. Server may return fewer rooms
	// than requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value of google.showcase.v1beta1.ListRoomsResponse.next_page_token
	// returned from the previous call to
	// `google.showcase.v1beta1.Messaging\ListRooms` method.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRoomsRequest) Reset() {
	*x = ListRoomsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoomsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoomsRequest) ProtoMessage() {}

func (x *ListRoomsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoomsRequest.ProtoReflect.Descriptor instead.
func (*ListRoomsRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{5}
}

func (x *ListRoomsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRoomsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// The response message for the google.showcase.v1beta1.Messaging\ListRooms
// method.
type ListRoomsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rooms.
	Rooms []*Room `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty"`
	// A token to retrieve next page of results.
	// Pass this value in ListRoomsRequest.page_token field in the subsequent
	// call to `google.showcase.v1beta1.Messaging\ListRooms` method to retrieve the
	// next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRoomsResponse) Reset() {
	*x = ListRoomsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoomsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoomsResponse) ProtoMessage() {}

func (x *ListRoomsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoomsResponse.ProtoReflect.Descriptor instead.
func (*ListRoomsResponse) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{6}
}

func (x *ListRoomsResponse) GetRooms() []*Room {
	if x != nil {
		return x.Rooms
	}
	return nil
}

func (x *ListRoomsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// This protocol buffer message represents a blurb sent to a chat room or
// posted on a user profile.
type Blurb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the chat room.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The resource name of the blurb's author.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// Types that are assignable to Content:
	//	*Blurb_Text
	//	*Blurb_Image
	Content isBlurb_Content `protobuf_oneof:"content"`
	// The timestamp at which the blurb was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The latest timestamp at which the blurb was updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// (-- aip.dev/not-precedent: This is designed for testing non-slash
	//     resource patterns. Ordinarily, non-slash separators are discouraged. --)
	//
	// Types that are assignable to LegacyId:
	//	*Blurb_LegacyRoomId
	//	*Blurb_LegacyUserId
	LegacyId isBlurb_LegacyId `protobuf_oneof:"legacy_id"`
}

func (x *Blurb) Reset() {
	*x = Blurb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blurb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blurb) ProtoMessage() {}

func (x *Blurb) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blurb.ProtoReflect.Descriptor instead.
func (*Blurb) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{7}
}

func (x *Blurb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Blurb) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (m *Blurb) GetContent() isBlurb_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Blurb) GetText() string {
	if x, ok := x.GetContent().(*Blurb_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Blurb) GetImage() []byte {
	if x, ok := x.GetContent().(*Blurb_Image); ok {
		return x.Image
	}
	return nil
}

func (x *Blurb) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Blurb) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (m *Blurb) GetLegacyId() isBlurb_LegacyId {
	if m != nil {
		return m.LegacyId
	}
	return nil
}

func (x *Blurb) GetLegacyRoomId() string {
	if x, ok := x.GetLegacyId().(*Blurb_LegacyRoomId); ok {
		return x.LegacyRoomId
	}
	return ""
}

func (x *Blurb) GetLegacyUserId() string {
	if x, ok := x.GetLegacyId().(*Blurb_LegacyUserId); ok {
		return x.LegacyUserId
	}
	return ""
}

type isBlurb_Content interface {
	isBlurb_Content()
}

type Blurb_Text struct {
	// The textual content of this blurb.
	Text string `protobuf:"bytes,3,opt,name=text,proto3,oneof"`
}

type Blurb_Image struct {
	// The image content of this blurb.
	Image []byte `protobuf:"bytes,4,opt,name=image,proto3,oneof"`
}

func (*Blurb_Text) isBlurb_Content() {}

func (*Blurb_Image) isBlurb_Content() {}

type isBlurb_LegacyId interface {
	isBlurb_LegacyId()
}

type Blurb_LegacyRoomId struct {
	// The legacy id of the room. This field is used to signal
	// the use of the compound resource pattern `rooms/{room}/blurbs/legacy/{legacy_room}.{blurb}`
	LegacyRoomId string `protobuf:"bytes,7,opt,name=legacy_room_id,json=legacyRoomId,proto3,oneof"`
}

type Blurb_LegacyUserId struct {
	// The legacy id of the user. This field is used to signal
	// the use of the compound resource pattern `users/{user}/profile/blurbs/legacy/{legacy_user}~{blurb}`
	LegacyUserId string `protobuf:"bytes,8,opt,name=legacy_user_id,json=legacyUserId,proto3,oneof"`
}

func (*Blurb_LegacyRoomId) isBlurb_LegacyId() {}

func (*Blurb_LegacyUserId) isBlurb_LegacyId() {}

// The request message for the google.showcase.v1beta1.Messaging\CreateBlurb
// method.
type CreateBlurbRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the chat room or user profile that this blurb will
	// be tied to.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The blurb to create.
	Blurb *Blurb `protobuf:"bytes,2,opt,name=blurb,proto3" json:"blurb,omitempty"`
}

func (x *CreateBlurbRequest) Reset() {
	*x = CreateBlurbRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlurbRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlurbRequest) ProtoMessage() {}

func (x *CreateBlurbRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlurbRequest.ProtoReflect.Descriptor instead.
func (*CreateBlurbRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{8}
}

func (x *CreateBlurbRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateBlurbRequest) GetBlurb() *Blurb {
	if x != nil {
		return x.Blurb
	}
	return nil
}

// The request message for the google.showcase.v1beta1.Messaging\GetBlurb
// method.
type GetBlurbRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the requested blurb.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetBlurbRequest) Reset() {
	*x = GetBlurbRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlurbRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlurbRequest) ProtoMessage() {}

func (x *GetBlurbRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlurbRequest.ProtoReflect.Descriptor instead.
func (*GetBlurbRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{9}
}

func (x *GetBlurbRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request message for the google.showcase.v1beta1.Messaging\UpdateBlurb
// method.
type UpdateBlurbRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The blurb to update.
	Blurb *Blurb `protobuf:"bytes,1,opt,name=blurb,proto3" json:"blurb,omitempty"`
	// The field mask to determine wich fields are to be updated. If empty, the
	// server will assume all fields are to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateBlurbRequest) Reset() {
	*x = UpdateBlurbRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBlurbRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlurbRequest) ProtoMessage() {}

func (x *UpdateBlurbRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlurbRequest.ProtoReflect.Descriptor instead.
func (*UpdateBlurbRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateBlurbRequest) GetBlurb() *Blurb {
	if x != nil {
		return x.Blurb
	}
	return nil
}

func (x *UpdateBlurbRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// The request message for the google.showcase.v1beta1.Messaging\DeleteBlurb
// method.
type DeleteBlurbRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the requested blurb.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteBlurbRequest) Reset() {
	*x = DeleteBlurbRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBlurbRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlurbRequest) ProtoMessage() {}

func (x *DeleteBlurbRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlurbRequest.ProtoReflect.Descriptor instead.
func (*DeleteBlurbRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteBlurbRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request message for the google.showcase.v1beta1.Messaging\ListBlurbs
// method.
type ListBlurbsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the requested room or profile whos blurbs to list.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of blurbs to return. Server may return fewer
	// blurbs than requested. If unspecified, server will pick an appropriate
	// default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value of google.showcase.v1beta1.ListBlurbsResponse.next_page_token
	// returned from the previous call to
	// `google.showcase.v1beta1.Messaging\ListBlurbs` method.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBlurbsRequest) Reset() {
	*x = ListBlurbsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlurbsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlurbsRequest) ProtoMessage() {}

func (x *ListBlurbsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlurbsRequest.ProtoReflect.Descriptor instead.
func (*ListBlurbsRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{12}
}

func (x *ListBlurbsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListBlurbsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBlurbsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// The response message for the google.showcase.v1beta1.Messaging\ListBlurbs
// method.
type ListBlurbsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of blurbs.
	Blurbs []*Blurb `protobuf:"bytes,1,rep,name=blurbs,proto3" json:"blurbs,omitempty"`
	// A token to retrieve next page of results.
	// Pass this value in ListBlurbsRequest.page_token field in the subsequent
	// call to `google.showcase.v1beta1.Blurb\ListBlurbs` method to retrieve
	// the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBlurbsResponse) Reset() {
	*x = ListBlurbsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlurbsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlurbsResponse) ProtoMessage() {}

func (x *ListBlurbsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlurbsResponse.ProtoReflect.Descriptor instead.
func (*ListBlurbsResponse) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{13}
}

func (x *ListBlurbsResponse) GetBlurbs() []*Blurb {
	if x != nil {
		return x.Blurbs
	}
	return nil
}

func (x *ListBlurbsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request message for the google.showcase.v1beta1.Messaging\SearchBlurbs
// method.
type SearchBlurbsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query used to search for blurbs containing to words of this string.
	// Only posts that contain an exact match of a queried word will be returned.
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// The rooms or profiles to search. If unset, `SearchBlurbs` will search all
	// rooms and all profiles.
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of blurbs return. Server may return fewer
	// blurbs than requested. If unspecified, server will pick an appropriate
	// default.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value of
	// google.showcase.v1beta1.SearchBlurbsResponse.next_page_token
	// returned from the previous call to
	// `google.showcase.v1beta1.Messaging\SearchBlurbs` method.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SearchBlurbsRequest) Reset() {
	*x = SearchBlurbsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBlurbsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBlurbsRequest) ProtoMessage() {}

func (x *SearchBlurbsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBlurbsRequest.ProtoReflect.Descriptor instead.
func (*SearchBlurbsRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{14}
}

func (x *SearchBlurbsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchBlurbsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *SearchBlurbsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchBlurbsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// The operation metadata message for the
// google.showcase.v1beta1.Messaging\SearchBlurbs method.
type SearchBlurbsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This signals to the client when to next poll for response.
	RetryInfo *errdetails.RetryInfo `protobuf:"bytes,1,opt,name=retry_info,json=retryInfo,proto3" json:"retry_info,omitempty"`
}

func (x *SearchBlurbsMetadata) Reset() {
	*x = SearchBlurbsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBlurbsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBlurbsMetadata) ProtoMessage() {}

func (x *SearchBlurbsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBlurbsMetadata.ProtoReflect.Descriptor instead.
func (*SearchBlurbsMetadata) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{15}
}

func (x *SearchBlurbsMetadata) GetRetryInfo() *errdetails.RetryInfo {
	if x != nil {
		return x.RetryInfo
	}
	return nil
}

// The operation response message for the
// google.showcase.v1beta1.Messaging\SearchBlurbs method.
type SearchBlurbsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Blurbs that matched the search query.
	Blurbs []*Blurb `protobuf:"bytes,1,rep,name=blurbs,proto3" json:"blurbs,omitempty"`
	// A token to retrieve next page of results.
	// Pass this value in SearchBlurbsRequest.page_token field in the subsequent
	// call to `google.showcase.v1beta1.Blurb\SearchBlurbs` method to
	// retrieve the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *SearchBlurbsResponse) Reset() {
	*x = SearchBlurbsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBlurbsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBlurbsResponse) ProtoMessage() {}

func (x *SearchBlurbsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBlurbsResponse.ProtoReflect.Descriptor instead.
func (*SearchBlurbsResponse) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{16}
}

func (x *SearchBlurbsResponse) GetBlurbs() []*Blurb {
	if x != nil {
		return x.Blurbs
	}
	return nil
}

func (x *SearchBlurbsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request message for the google.showcase.v1beta1.Messaging\StreamBlurbs
// method.
type StreamBlurbsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of a chat room or user profile whose blurbs to stream.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The time at which this stream will close.
	ExpireTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *StreamBlurbsRequest) Reset() {
	*x = StreamBlurbsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBlurbsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBlurbsRequest) ProtoMessage() {}

func (x *StreamBlurbsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBlurbsRequest.ProtoReflect.Descriptor instead.
func (*StreamBlurbsRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{17}
}

func (x *StreamBlurbsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamBlurbsRequest) GetExpireTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

// The response message for the google.showcase.v1beta1.Messaging\StreamBlurbs
// method.
type StreamBlurbsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The blurb that was either created, updated, or deleted.
	Blurb *Blurb `protobuf:"bytes,1,opt,name=blurb,proto3" json:"blurb,omitempty"`
	// The action that triggered the blurb to be returned.
	Action StreamBlurbsResponse_Action `protobuf:"varint,2,opt,name=action,proto3,enum=google.showcase.v1beta1.StreamBlurbsResponse_Action" json:"action,omitempty"`
}

func (x *StreamBlurbsResponse) Reset() {
	*x = StreamBlurbsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBlurbsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBlurbsResponse) ProtoMessage() {}

func (x *StreamBlurbsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBlurbsResponse.ProtoReflect.Descriptor instead.
func (*StreamBlurbsResponse) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{18}
}

func (x *StreamBlurbsResponse) GetBlurb() *Blurb {
	if x != nil {
		return x.Blurb
	}
	return nil
}

func (x *StreamBlurbsResponse) GetAction() StreamBlurbsResponse_Action {
	if x != nil {
		return x.Action
	}
	return StreamBlurbsResponse_ACTION_UNSPECIFIED
}

// The response message for the google.showcase.v1beta1.Messaging\SendBlurbs
// method.
type SendBlurbsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of successful blurb creations.
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *SendBlurbsResponse) Reset() {
	*x = SendBlurbsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendBlurbsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBlurbsResponse) ProtoMessage() {}

func (x *SendBlurbsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBlurbsResponse.ProtoReflect.Descriptor instead.
func (*SendBlurbsResponse) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{19}
}

func (x *SendBlurbsResponse) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// The request message for the google.showcase.v1beta1.Messaging\Connect
// method.
type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*ConnectRequest_Config
	//	*ConnectRequest_Blurb
	Request isConnectRequest_Request `protobuf_oneof:"request"`
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{20}
}

func (m *ConnectRequest) GetRequest() isConnectRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *ConnectRequest) GetConfig() *ConnectRequest_ConnectConfig {
	if x, ok := x.GetRequest().(*ConnectRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *ConnectRequest) GetBlurb() *Blurb {
	if x, ok := x.GetRequest().(*ConnectRequest_Blurb); ok {
		return x.Blurb
	}
	return nil
}

type isConnectRequest_Request interface {
	isConnectRequest_Request()
}

type ConnectRequest_Config struct {
	// Provides information that specifies how to process subsequent requests.
	// The first `ConnectRequest` message must contain a `config`  message.
	Config *ConnectRequest_ConnectConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type ConnectRequest_Blurb struct {
	// The blurb to be created.
	Blurb *Blurb `protobuf:"bytes,2,opt,name=blurb,proto3,oneof"`
}

func (*ConnectRequest_Config) isConnectRequest_Request() {}

func (*ConnectRequest_Blurb) isConnectRequest_Request() {}

type ConnectRequest_ConnectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The room or profile to follow and create messages for.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ConnectRequest_ConnectConfig) Reset() {
	*x = ConnectRequest_ConnectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest_ConnectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest_ConnectConfig) ProtoMessage() {}

func (x *ConnectRequest_ConnectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_showcase_v1beta1_messaging_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest_ConnectConfig.ProtoReflect.Descriptor instead.
func (*ConnectRequest_ConnectConfig) Descriptor() ([]byte, []int) {
	return file_google_showcase_v1beta1_messaging_proto_rawDescGZIP(), []int{20, 0}
}

func (x *ConnectRequest_ConnectConfig) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

var File_google_showcase_v1beta1_messaging_proto protoreflect.FileDescriptor

var file_google_showcase_v1beta1_messaging_proto_rawDesc = []byte{
	0x0a, 0x27, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73,
	0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f,
	0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x04, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x2f, 0xea, 0x41, 0x2c, 0x0a, 0x1c, 0x73, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f,
	0x7b, 0x72, 0x6f, 0x6f, 0x6d, 0x7d, 0x22, 0x46, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x4a,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x6f,
	0x6d, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72,
	0x6f, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x4d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x52, 0x6f, 0x6f, 0x6d, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x4e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x70, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xc3, 0x04, 0x0a, 0x05, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa,
	0x41, 0x1e, 0x0a, 0x1c, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x73, 0x65, 0x72,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x16, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0xd1, 0x01, 0xea, 0x41,
	0xcd, 0x01, 0x0a, 0x1d, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x6c, 0x75, 0x72,
	0x62, 0x12, 0x38, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x2f, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x2f, 0x7b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x7d, 0x7e, 0x7b, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x7d, 0x12, 0x23, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x2f, 0x7b, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x7d,
	0x12, 0x1b, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6f, 0x6d, 0x7d, 0x2f, 0x62,
	0x6c, 0x75, 0x72, 0x62, 0x73, 0x2f, 0x7b, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x7d, 0x12, 0x30, 0x72,
	0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6f, 0x6d, 0x7d, 0x2f, 0x62, 0x6c, 0x75, 0x72,
	0x62, 0x73, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2f, 0x7b, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x7d, 0x2e, 0x7b, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x7d, 0x42,
	0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25,
	0xfa, 0x41, 0x1f, 0x12, 0x1d, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x6c, 0x75,
	0x72, 0x62, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x05, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x52, 0x05, 0x62, 0x6c,
	0x75, 0x72, 0x62, 0x22, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x73, 0x68, 0x6f, 0x77, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x42, 0x6c, 0x75, 0x72, 0x62, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x75, 0x72,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x62, 0x6c, 0x75, 0x72,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x52, 0x05, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x4f, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x25, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x6c,
	0x75, 0x72, 0x62, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x25, 0xfa, 0x41, 0x1f, 0x12, 0x1d, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x42, 0x6c, 0x75, 0x72, 0x62, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x74, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6c,
	0x75, 0x72, 0x62, 0x52, 0x06, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c,
	0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x41, 0x1f, 0x12, 0x1d, 0x73, 0x68, 0x6f,
	0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4c,
	0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x76, 0x0a, 0x14,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42,
	0x6c, 0x75, 0x72, 0x62, 0x52, 0x06, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42,
	0x6c, 0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xfa, 0x41, 0x1f, 0x12,
	0x1d, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x6c, 0x75, 0x72, 0x62, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x72,
	0x62, 0x52, 0x05, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x12, 0x4c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22, 0x2a, 0x0a, 0x12,
	0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x05,
	0x62, 0x6c, 0x75, 0x72, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x48, 0x00, 0x52, 0x05, 0x62,
	0x6c, 0x75, 0x72, 0x62, 0x1a, 0x4b, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x41, 0x1f, 0x12, 0x1d, 0x73, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xa2, 0x13, 0x0a,
	0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x97, 0x01, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x3a, 0x01, 0x2a, 0xda,
	0x41, 0x22, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x2c, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12,
	0x17, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x80, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x32, 0x1c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b, 0x72, 0x6f, 0x6f,
	0x6d, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x6f, 0x6f,
	0x6d, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0xf6, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x42, 0x6c, 0x75, 0x72, 0x62, 0x22, 0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x22, 0x20,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73,
	0x3a, 0x01, 0x2a, 0x5a, 0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x7d, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x3a,
	0x01, 0x2a, 0xda, 0x41, 0x1c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x62, 0x6c, 0x75, 0x72,
	0x62, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x2e, 0x74, 0x65, 0x78,
	0x74, 0xda, 0x41, 0x1d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x62, 0x6c, 0x75, 0x72, 0x62,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x2e, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0xb1, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x12, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x75, 0x72,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e,
	0x12, 0x20, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x2f,
	0x2a, 0x7d, 0x5a, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xc2, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x75, 0x72, 0x62, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6c, 0x75,
	0x72, 0x62, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x60, 0x32, 0x26, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x2f,
	0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x33, 0x32, 0x2e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x7b, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x62, 0x6c,
	0x75, 0x72, 0x62, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xaf, 0x01, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x2a, 0x20, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x2a, 0x2f,
	0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x2f, 0x2a, 0x7d, 0x5a, 0x2a, 0x2a, 0x28, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x62, 0x6c, 0x75, 0x72,
	0x62, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xc4, 0x01, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x12, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x12, 0x20, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x72,
	0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x5a, 0x2a,
	0x12, 0x28, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x7d, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0xfa, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c,
	0x75, 0x72, 0x62, 0x73, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5f, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x72, 0x6f, 0x6f,
	0x6d, 0x73, 0x2f, 0x2d, 0x7d, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x3a, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x5a, 0x31, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x2d, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x7d, 0x2f, 0x62, 0x6c, 0x75, 0x72,
	0x62, 0x73, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0xca, 0x41, 0x2c, 0x0a, 0x14, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0xd3, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x6c, 0x75, 0x72, 0x62,
	0x73, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x3a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3a, 0x01, 0x2a,
	0x5a, 0x32, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x7d, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x3a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0xce, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x42,
	0x6c, 0x75, 0x72, 0x62, 0x73, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x3a, 0x73, 0x65, 0x6e, 0x64, 0x3a, 0x01,
	0x2a, 0x5a, 0x32, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x7d, 0x2f, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x73, 0x3a, 0x73, 0x65,
	0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x28, 0x01, 0x12, 0x65, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x6c, 0x75, 0x72,
	0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x1a, 0x11,
	0xca, 0x41, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x37, 0x34, 0x36,
	0x39, 0x42, 0x55, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x61, 0x70, 0x69, 0x63, 0x2d,
	0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_showcase_v1beta1_messaging_proto_rawDescOnce sync.Once
	file_google_showcase_v1beta1_messaging_proto_rawDescData = file_google_showcase_v1beta1_messaging_proto_rawDesc
)

func file_google_showcase_v1beta1_messaging_proto_rawDescGZIP() []byte {
	file_google_showcase_v1beta1_messaging_proto_rawDescOnce.Do(func() {
		file_google_showcase_v1beta1_messaging_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_showcase_v1beta1_messaging_proto_rawDescData)
	})
	return file_google_showcase_v1beta1_messaging_proto_rawDescData
}

var file_google_showcase_v1beta1_messaging_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_showcase_v1beta1_messaging_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_google_showcase_v1beta1_messaging_proto_goTypes = []interface{}{
	(StreamBlurbsResponse_Action)(0),     // 0: google.showcase.v1beta1.StreamBlurbsResponse.Action
	(*Room)(nil),                         // 1: google.showcase.v1beta1.Room
	(*CreateRoomRequest)(nil),            // 2: google.showcase.v1beta1.CreateRoomRequest
	(*GetRoomRequest)(nil),               // 3: google.showcase.v1beta1.GetRoomRequest
	(*UpdateRoomRequest)(nil),            // 4: google.showcase.v1beta1.UpdateRoomRequest
	(*DeleteRoomRequest)(nil),            // 5: google.showcase.v1beta1.DeleteRoomRequest
	(*ListRoomsRequest)(nil),             // 6: google.showcase.v1beta1.ListRoomsRequest
	(*ListRoomsResponse)(nil),            // 7: google.showcase.v1beta1.ListRoomsResponse
	(*Blurb)(nil),                        // 8: google.showcase.v1beta1.Blurb
	(*CreateBlurbRequest)(nil),           // 9: google.showcase.v1beta1.CreateBlurbRequest
	(*GetBlurbRequest)(nil),              // 10: google.showcase.v1beta1.GetBlurbRequest
	(*UpdateBlurbRequest)(nil),           // 11: google.showcase.v1beta1.UpdateBlurbRequest
	(*DeleteBlurbRequest)(nil),           // 12: google.showcase.v1beta1.DeleteBlurbRequest
	(*ListBlurbsRequest)(nil),            // 13: google.showcase.v1beta1.ListBlurbsRequest
	(*ListBlurbsResponse)(nil),           // 14: google.showcase.v1beta1.ListBlurbsResponse
	(*SearchBlurbsRequest)(nil),          // 15: google.showcase.v1beta1.SearchBlurbsRequest
	(*SearchBlurbsMetadata)(nil),         // 16: google.showcase.v1beta1.SearchBlurbsMetadata
	(*SearchBlurbsResponse)(nil),         // 17: google.showcase.v1beta1.SearchBlurbsResponse
	(*StreamBlurbsRequest)(nil),          // 18: google.showcase.v1beta1.StreamBlurbsRequest
	(*StreamBlurbsResponse)(nil),         // 19: google.showcase.v1beta1.StreamBlurbsResponse
	(*SendBlurbsResponse)(nil),           // 20: google.showcase.v1beta1.SendBlurbsResponse
	(*ConnectRequest)(nil),               // 21: google.showcase.v1beta1.ConnectRequest
	(*ConnectRequest_ConnectConfig)(nil), // 22: google.showcase.v1beta1.ConnectRequest.ConnectConfig
	(*timestamp.Timestamp)(nil),          // 23: google.protobuf.Timestamp
	(*field_mask.FieldMask)(nil),         // 24: google.protobuf.FieldMask
	(*errdetails.RetryInfo)(nil),         // 25: google.rpc.RetryInfo
	(*empty.Empty)(nil),                  // 26: google.protobuf.Empty
	(*longrunning.Operation)(nil),        // 27: google.longrunning.Operation
}
var file_google_showcase_v1beta1_messaging_proto_depIdxs = []int32{
	23, // 0: google.showcase.v1beta1.Room.create_time:type_name -> google.protobuf.Timestamp
	23, // 1: google.showcase.v1beta1.Room.update_time:type_name -> google.protobuf.Timestamp
	1,  // 2: google.showcase.v1beta1.CreateRoomRequest.room:type_name -> google.showcase.v1beta1.Room
	1,  // 3: google.showcase.v1beta1.UpdateRoomRequest.room:type_name -> google.showcase.v1beta1.Room
	24, // 4: google.showcase.v1beta1.UpdateRoomRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 5: google.showcase.v1beta1.ListRoomsResponse.rooms:type_name -> google.showcase.v1beta1.Room
	23, // 6: google.showcase.v1beta1.Blurb.create_time:type_name -> google.protobuf.Timestamp
	23, // 7: google.showcase.v1beta1.Blurb.update_time:type_name -> google.protobuf.Timestamp
	8,  // 8: google.showcase.v1beta1.CreateBlurbRequest.blurb:type_name -> google.showcase.v1beta1.Blurb
	8,  // 9: google.showcase.v1beta1.UpdateBlurbRequest.blurb:type_name -> google.showcase.v1beta1.Blurb
	24, // 10: google.showcase.v1beta1.UpdateBlurbRequest.update_mask:type_name -> google.protobuf.FieldMask
	8,  // 11: google.showcase.v1beta1.ListBlurbsResponse.blurbs:type_name -> google.showcase.v1beta1.Blurb
	25, // 12: google.showcase.v1beta1.SearchBlurbsMetadata.retry_info:type_name -> google.rpc.RetryInfo
	8,  // 13: google.showcase.v1beta1.SearchBlurbsResponse.blurbs:type_name -> google.showcase.v1beta1.Blurb
	23, // 14: google.showcase.v1beta1.StreamBlurbsRequest.expire_time:type_name -> google.protobuf.Timestamp
	8,  // 15: google.showcase.v1beta1.StreamBlurbsResponse.blurb:type_name -> google.showcase.v1beta1.Blurb
	0,  // 16: google.showcase.v1beta1.StreamBlurbsResponse.action:type_name -> google.showcase.v1beta1.StreamBlurbsResponse.Action
	22, // 17: google.showcase.v1beta1.ConnectRequest.config:type_name -> google.showcase.v1beta1.ConnectRequest.ConnectConfig
	8,  // 18: google.showcase.v1beta1.ConnectRequest.blurb:type_name -> google.showcase.v1beta1.Blurb
	2,  // 19: google.showcase.v1beta1.Messaging.CreateRoom:input_type -> google.showcase.v1beta1.CreateRoomRequest
	3,  // 20: google.showcase.v1beta1.Messaging.GetRoom:input_type -> google.showcase.v1beta1.GetRoomRequest
	4,  // 21: google.showcase.v1beta1.Messaging.UpdateRoom:input_type -> google.showcase.v1beta1.UpdateRoomRequest
	5,  // 22: google.showcase.v1beta1.Messaging.DeleteRoom:input_type -> google.showcase.v1beta1.DeleteRoomRequest
	6,  // 23: google.showcase.v1beta1.Messaging.ListRooms:input_type -> google.showcase.v1beta1.ListRoomsRequest
	9,  // 24: google.showcase.v1beta1.Messaging.CreateBlurb:input_type -> google.showcase.v1beta1.CreateBlurbRequest
	10, // 25: google.showcase.v1beta1.Messaging.GetBlurb:input_type -> google.showcase.v1beta1.GetBlurbRequest
	11, // 26: google.showcase.v1beta1.Messaging.UpdateBlurb:input_type -> google.showcase.v1beta1.UpdateBlurbRequest
	12, // 27: google.showcase.v1beta1.Messaging.DeleteBlurb:input_type -> google.showcase.v1beta1.DeleteBlurbRequest
	13, // 28: google.showcase.v1beta1.Messaging.ListBlurbs:input_type -> google.showcase.v1beta1.ListBlurbsRequest
	15, // 29: google.showcase.v1beta1.Messaging.SearchBlurbs:input_type -> google.showcase.v1beta1.SearchBlurbsRequest
	18, // 30: google.showcase.v1beta1.Messaging.StreamBlurbs:input_type -> google.showcase.v1beta1.StreamBlurbsRequest
	9,  // 31: google.showcase.v1beta1.Messaging.SendBlurbs:input_type -> google.showcase.v1beta1.CreateBlurbRequest
	21, // 32: google.showcase.v1beta1.Messaging.Connect:input_type -> google.showcase.v1beta1.ConnectRequest
	1,  // 33: google.showcase.v1beta1.Messaging.CreateRoom:output_type -> google.showcase.v1beta1.Room
	1,  // 34: google.showcase.v1beta1.Messaging.GetRoom:output_type -> google.showcase.v1beta1.Room
	1,  // 35: google.showcase.v1beta1.Messaging.UpdateRoom:output_type -> google.showcase.v1beta1.Room
	26, // 36: google.showcase.v1beta1.Messaging.DeleteRoom:output_type -> google.protobuf.Empty
	7,  // 37: google.showcase.v1beta1.Messaging.ListRooms:output_type -> google.showcase.v1beta1.ListRoomsResponse
	8,  // 38: google.showcase.v1beta1.Messaging.CreateBlurb:output_type -> google.showcase.v1beta1.Blurb
	8,  // 39: google.showcase.v1beta1.Messaging.GetBlurb:output_type -> google.showcase.v1beta1.Blurb
	8,  // 40: google.showcase.v1beta1.Messaging.UpdateBlurb:output_type -> google.showcase.v1beta1.Blurb
	26, // 41: google.showcase.v1beta1.Messaging.DeleteBlurb:output_type -> google.protobuf.Empty
	14, // 42: google.showcase.v1beta1.Messaging.ListBlurbs:output_type -> google.showcase.v1beta1.ListBlurbsResponse
	27, // 43: google.showcase.v1beta1.Messaging.SearchBlurbs:output_type -> google.longrunning.Operation
	19, // 44: google.showcase.v1beta1.Messaging.StreamBlurbs:output_type -> google.showcase.v1beta1.StreamBlurbsResponse
	20, // 45: google.showcase.v1beta1.Messaging.SendBlurbs:output_type -> google.showcase.v1beta1.SendBlurbsResponse
	19, // 46: google.showcase.v1beta1.Messaging.Connect:output_type -> google.showcase.v1beta1.StreamBlurbsResponse
	33, // [33:47] is the sub-list for method output_type
	19, // [19:33] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_google_showcase_v1beta1_messaging_proto_init() }
func file_google_showcase_v1beta1_messaging_proto_init() {
	if File_google_showcase_v1beta1_messaging_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_showcase_v1beta1_messaging_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Room); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoomsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoomsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blurb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBlurbRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlurbRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBlurbRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBlurbRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlurbsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlurbsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBlurbsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBlurbsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBlurbsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamBlurbsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamBlurbsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendBlurbsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_showcase_v1beta1_messaging_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest_ConnectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_showcase_v1beta1_messaging_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Blurb_Text)(nil),
		(*Blurb_Image)(nil),
		(*Blurb_LegacyRoomId)(nil),
		(*Blurb_LegacyUserId)(nil),
	}
	file_google_showcase_v1beta1_messaging_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*ConnectRequest_Config)(nil),
		(*ConnectRequest_Blurb)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_showcase_v1beta1_messaging_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_showcase_v1beta1_messaging_proto_goTypes,
		DependencyIndexes: file_google_showcase_v1beta1_messaging_proto_depIdxs,
		EnumInfos:         file_google_showcase_v1beta1_messaging_proto_enumTypes,
		MessageInfos:      file_google_showcase_v1beta1_messaging_proto_msgTypes,
	}.Build()
	File_google_showcase_v1beta1_messaging_proto = out.File
	file_google_showcase_v1beta1_messaging_proto_rawDesc = nil
	file_google_showcase_v1beta1_messaging_proto_goTypes = nil
	file_google_showcase_v1beta1_messaging_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessagingClient is the client API for Messaging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagingClient interface {
	// Creates a room.
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error)
	// Retrieves the Room with the given resource name.
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*Room, error)
	// Updates a room.
	UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*Room, error)
	// Deletes a room and all of its blurbs.
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists all chat rooms.
	ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	// Creates a blurb. If the parent is a room, the blurb is understood to be a
	// message in that room. If the parent is a profile, the blurb is understood
	// to be a post on the profile.
	CreateBlurb(ctx context.Context, in *CreateBlurbRequest, opts ...grpc.CallOption) (*Blurb, error)
	// Retrieves the Blurb with the given resource name.
	GetBlurb(ctx context.Context, in *GetBlurbRequest, opts ...grpc.CallOption) (*Blurb, error)
	// Updates a blurb.
	UpdateBlurb(ctx context.Context, in *UpdateBlurbRequest, opts ...grpc.CallOption) (*Blurb, error)
	// Deletes a blurb.
	DeleteBlurb(ctx context.Context, in *DeleteBlurbRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists blurbs for a specific chat room or user profile depending on the
	// parent resource name.
	ListBlurbs(ctx context.Context, in *ListBlurbsRequest, opts ...grpc.CallOption) (*ListBlurbsResponse, error)
	// This method searches through all blurbs across all rooms and profiles
	// for blurbs containing to words found in the query. Only posts that
	// contain an exact match of a queried word will be returned.
	SearchBlurbs(ctx context.Context, in *SearchBlurbsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// This returns a stream that emits the blurbs that are created for a
	// particular chat room or user profile.
	StreamBlurbs(ctx context.Context, in *StreamBlurbsRequest, opts ...grpc.CallOption) (Messaging_StreamBlurbsClient, error)
	// This is a stream to create multiple blurbs. If an invalid blurb is
	// requested to be created, the stream will close with an error.
	SendBlurbs(ctx context.Context, opts ...grpc.CallOption) (Messaging_SendBlurbsClient, error)
	// This method starts a bidirectional stream that receives all blurbs that
	// are being created after the stream has started and sends requests to create
	// blurbs. If an invalid blurb is requested to be created, the stream will
	// close with an error.
	Connect(ctx context.Context, opts ...grpc.CallOption) (Messaging_ConnectClient, error)
}

type messagingClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingClient(cc grpc.ClientConnInterface) MessagingClient {
	return &messagingClient{cc}
}

func (c *messagingClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Messaging/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Messaging/GetRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Messaging/UpdateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Messaging/DeleteRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Messaging/ListRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) CreateBlurb(ctx context.Context, in *CreateBlurbRequest, opts ...grpc.CallOption) (*Blurb, error) {
	out := new(Blurb)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Messaging/CreateBlurb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) GetBlurb(ctx context.Context, in *GetBlurbRequest, opts ...grpc.CallOption) (*Blurb, error) {
	out := new(Blurb)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Messaging/GetBlurb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) UpdateBlurb(ctx context.Context, in *UpdateBlurbRequest, opts ...grpc.CallOption) (*Blurb, error) {
	out := new(Blurb)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Messaging/UpdateBlurb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) DeleteBlurb(ctx context.Context, in *DeleteBlurbRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Messaging/DeleteBlurb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) ListBlurbs(ctx context.Context, in *ListBlurbsRequest, opts ...grpc.CallOption) (*ListBlurbsResponse, error) {
	out := new(ListBlurbsResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Messaging/ListBlurbs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) SearchBlurbs(ctx context.Context, in *SearchBlurbsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.showcase.v1beta1.Messaging/SearchBlurbs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) StreamBlurbs(ctx context.Context, in *StreamBlurbsRequest, opts ...grpc.CallOption) (Messaging_StreamBlurbsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messaging_serviceDesc.Streams[0], "/google.showcase.v1beta1.Messaging/StreamBlurbs", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingStreamBlurbsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messaging_StreamBlurbsClient interface {
	Recv() (*StreamBlurbsResponse, error)
	grpc.ClientStream
}

type messagingStreamBlurbsClient struct {
	grpc.ClientStream
}

func (x *messagingStreamBlurbsClient) Recv() (*StreamBlurbsResponse, error) {
	m := new(StreamBlurbsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingClient) SendBlurbs(ctx context.Context, opts ...grpc.CallOption) (Messaging_SendBlurbsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messaging_serviceDesc.Streams[1], "/google.showcase.v1beta1.Messaging/SendBlurbs", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingSendBlurbsClient{stream}
	return x, nil
}

type Messaging_SendBlurbsClient interface {
	Send(*CreateBlurbRequest) error
	CloseAndRecv() (*SendBlurbsResponse, error)
	grpc.ClientStream
}

type messagingSendBlurbsClient struct {
	grpc.ClientStream
}

func (x *messagingSendBlurbsClient) Send(m *CreateBlurbRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagingSendBlurbsClient) CloseAndRecv() (*SendBlurbsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendBlurbsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Messaging_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messaging_serviceDesc.Streams[2], "/google.showcase.v1beta1.Messaging/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingConnectClient{stream}
	return x, nil
}

type Messaging_ConnectClient interface {
	Send(*ConnectRequest) error
	Recv() (*StreamBlurbsResponse, error)
	grpc.ClientStream
}

type messagingConnectClient struct {
	grpc.ClientStream
}

func (x *messagingConnectClient) Send(m *ConnectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagingConnectClient) Recv() (*StreamBlurbsResponse, error) {
	m := new(StreamBlurbsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagingServer is the server API for Messaging service.
type MessagingServer interface {
	// Creates a room.
	CreateRoom(context.Context, *CreateRoomRequest) (*Room, error)
	// Retrieves the Room with the given resource name.
	GetRoom(context.Context, *GetRoomRequest) (*Room, error)
	// Updates a room.
	UpdateRoom(context.Context, *UpdateRoomRequest) (*Room, error)
	// Deletes a room and all of its blurbs.
	DeleteRoom(context.Context, *DeleteRoomRequest) (*empty.Empty, error)
	// Lists all chat rooms.
	ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error)
	// Creates a blurb. If the parent is a room, the blurb is understood to be a
	// message in that room. If the parent is a profile, the blurb is understood
	// to be a post on the profile.
	CreateBlurb(context.Context, *CreateBlurbRequest) (*Blurb, error)
	// Retrieves the Blurb with the given resource name.
	GetBlurb(context.Context, *GetBlurbRequest) (*Blurb, error)
	// Updates a blurb.
	UpdateBlurb(context.Context, *UpdateBlurbRequest) (*Blurb, error)
	// Deletes a blurb.
	DeleteBlurb(context.Context, *DeleteBlurbRequest) (*empty.Empty, error)
	// Lists blurbs for a specific chat room or user profile depending on the
	// parent resource name.
	ListBlurbs(context.Context, *ListBlurbsRequest) (*ListBlurbsResponse, error)
	// This method searches through all blurbs across all rooms and profiles
	// for blurbs containing to words found in the query. Only posts that
	// contain an exact match of a queried word will be returned.
	SearchBlurbs(context.Context, *SearchBlurbsRequest) (*longrunning.Operation, error)
	// This returns a stream that emits the blurbs that are created for a
	// particular chat room or user profile.
	StreamBlurbs(*StreamBlurbsRequest, Messaging_StreamBlurbsServer) error
	// This is a stream to create multiple blurbs. If an invalid blurb is
	// requested to be created, the stream will close with an error.
	SendBlurbs(Messaging_SendBlurbsServer) error
	// This method starts a bidirectional stream that receives all blurbs that
	// are being created after the stream has started and sends requests to create
	// blurbs. If an invalid blurb is requested to be created, the stream will
	// close with an error.
	Connect(Messaging_ConnectServer) error
}

// UnimplementedMessagingServer can be embedded to have forward compatible implementations.
type UnimplementedMessagingServer struct {
}

func (*UnimplementedMessagingServer) CreateRoom(context.Context, *CreateRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (*UnimplementedMessagingServer) GetRoom(context.Context, *GetRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (*UnimplementedMessagingServer) UpdateRoom(context.Context, *UpdateRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (*UnimplementedMessagingServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (*UnimplementedMessagingServer) ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}
func (*UnimplementedMessagingServer) CreateBlurb(context.Context, *CreateBlurbRequest) (*Blurb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlurb not implemented")
}
func (*UnimplementedMessagingServer) GetBlurb(context.Context, *GetBlurbRequest) (*Blurb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlurb not implemented")
}
func (*UnimplementedMessagingServer) UpdateBlurb(context.Context, *UpdateBlurbRequest) (*Blurb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlurb not implemented")
}
func (*UnimplementedMessagingServer) DeleteBlurb(context.Context, *DeleteBlurbRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlurb not implemented")
}
func (*UnimplementedMessagingServer) ListBlurbs(context.Context, *ListBlurbsRequest) (*ListBlurbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlurbs not implemented")
}
func (*UnimplementedMessagingServer) SearchBlurbs(context.Context, *SearchBlurbsRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBlurbs not implemented")
}
func (*UnimplementedMessagingServer) StreamBlurbs(*StreamBlurbsRequest, Messaging_StreamBlurbsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlurbs not implemented")
}
func (*UnimplementedMessagingServer) SendBlurbs(Messaging_SendBlurbsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendBlurbs not implemented")
}
func (*UnimplementedMessagingServer) Connect(Messaging_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterMessagingServer(s *grpc.Server, srv MessagingServer) {
	s.RegisterService(&_Messaging_serviceDesc, srv)
}

func _Messaging_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Messaging/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Messaging/GetRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Messaging/UpdateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).UpdateRoom(ctx, req.(*UpdateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Messaging/DeleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Messaging/ListRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).ListRooms(ctx, req.(*ListRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_CreateBlurb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlurbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).CreateBlurb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Messaging/CreateBlurb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).CreateBlurb(ctx, req.(*CreateBlurbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_GetBlurb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlurbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).GetBlurb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Messaging/GetBlurb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).GetBlurb(ctx, req.(*GetBlurbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_UpdateBlurb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlurbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).UpdateBlurb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Messaging/UpdateBlurb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).UpdateBlurb(ctx, req.(*UpdateBlurbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_DeleteBlurb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlurbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).DeleteBlurb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Messaging/DeleteBlurb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).DeleteBlurb(ctx, req.(*DeleteBlurbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_ListBlurbs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlurbsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).ListBlurbs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Messaging/ListBlurbs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).ListBlurbs(ctx, req.(*ListBlurbsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_SearchBlurbs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBlurbsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).SearchBlurbs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1beta1.Messaging/SearchBlurbs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).SearchBlurbs(ctx, req.(*SearchBlurbsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_StreamBlurbs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBlurbsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServer).StreamBlurbs(m, &messagingStreamBlurbsServer{stream})
}

type Messaging_StreamBlurbsServer interface {
	Send(*StreamBlurbsResponse) error
	grpc.ServerStream
}

type messagingStreamBlurbsServer struct {
	grpc.ServerStream
}

func (x *messagingStreamBlurbsServer) Send(m *StreamBlurbsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Messaging_SendBlurbs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagingServer).SendBlurbs(&messagingSendBlurbsServer{stream})
}

type Messaging_SendBlurbsServer interface {
	SendAndClose(*SendBlurbsResponse) error
	Recv() (*CreateBlurbRequest, error)
	grpc.ServerStream
}

type messagingSendBlurbsServer struct {
	grpc.ServerStream
}

func (x *messagingSendBlurbsServer) SendAndClose(m *SendBlurbsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagingSendBlurbsServer) Recv() (*CreateBlurbRequest, error) {
	m := new(CreateBlurbRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messaging_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagingServer).Connect(&messagingConnectServer{stream})
}

type Messaging_ConnectServer interface {
	Send(*StreamBlurbsResponse) error
	Recv() (*ConnectRequest, error)
	grpc.ServerStream
}

type messagingConnectServer struct {
	grpc.ServerStream
}

func (x *messagingConnectServer) Send(m *StreamBlurbsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagingConnectServer) Recv() (*ConnectRequest, error) {
	m := new(ConnectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Messaging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.showcase.v1beta1.Messaging",
	HandlerType: (*MessagingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _Messaging_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _Messaging_GetRoom_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _Messaging_UpdateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _Messaging_DeleteRoom_Handler,
		},
		{
			MethodName: "ListRooms",
			Handler:    _Messaging_ListRooms_Handler,
		},
		{
			MethodName: "CreateBlurb",
			Handler:    _Messaging_CreateBlurb_Handler,
		},
		{
			MethodName: "GetBlurb",
			Handler:    _Messaging_GetBlurb_Handler,
		},
		{
			MethodName: "UpdateBlurb",
			Handler:    _Messaging_UpdateBlurb_Handler,
		},
		{
			MethodName: "DeleteBlurb",
			Handler:    _Messaging_DeleteBlurb_Handler,
		},
		{
			MethodName: "ListBlurbs",
			Handler:    _Messaging_ListBlurbs_Handler,
		},
		{
			MethodName: "SearchBlurbs",
			Handler:    _Messaging_SearchBlurbs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBlurbs",
			Handler:       _Messaging_StreamBlurbs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendBlurbs",
			Handler:       _Messaging_SendBlurbs_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Connect",
			Handler:       _Messaging_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "google/showcase/v1beta1/messaging.proto",
}
