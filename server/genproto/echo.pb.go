// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/showcase/v1alpha3/echo.proto

package genproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message used for the Echo, Collect and Chat methods. If content
// is set in this message then the request will succeed. If a status is
type EchoRequest struct {
	// Types that are valid to be assigned to Response:
	//	*EchoRequest_Content
	//	*EchoRequest_Error
	Response             isEchoRequest_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4be78b9cf935ae, []int{0}
}

func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

type isEchoRequest_Response interface {
	isEchoRequest_Response()
}

type EchoRequest_Content struct {
	Content string `protobuf:"bytes,1,opt,name=content,proto3,oneof"`
}

type EchoRequest_Error struct {
	Error *status.Status `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*EchoRequest_Content) isEchoRequest_Response() {}

func (*EchoRequest_Error) isEchoRequest_Response() {}

func (m *EchoRequest) GetResponse() isEchoRequest_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *EchoRequest) GetContent() string {
	if x, ok := m.GetResponse().(*EchoRequest_Content); ok {
		return x.Content
	}
	return ""
}

func (m *EchoRequest) GetError() *status.Status {
	if x, ok := m.GetResponse().(*EchoRequest_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EchoRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EchoRequest_Content)(nil),
		(*EchoRequest_Error)(nil),
	}
}

// The response message for the Echo methods.
type EchoResponse struct {
	// The content specified in the request.
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoResponse) Reset()         { *m = EchoResponse{} }
func (m *EchoResponse) String() string { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()    {}
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4be78b9cf935ae, []int{1}
}

func (m *EchoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoResponse.Unmarshal(m, b)
}
func (m *EchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoResponse.Marshal(b, m, deterministic)
}
func (m *EchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResponse.Merge(m, src)
}
func (m *EchoResponse) XXX_Size() int {
	return xxx_messageInfo_EchoResponse.Size(m)
}
func (m *EchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResponse proto.InternalMessageInfo

func (m *EchoResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// The request message for the Expand method.
type ExpandRequest struct {
	// The content that will be split into words and returned on the stream.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// The error that is thrown after all words are sent on the stream.
	Error                *status.Status `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ExpandRequest) Reset()         { *m = ExpandRequest{} }
func (m *ExpandRequest) String() string { return proto.CompactTextString(m) }
func (*ExpandRequest) ProtoMessage()    {}
func (*ExpandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4be78b9cf935ae, []int{2}
}

func (m *ExpandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpandRequest.Unmarshal(m, b)
}
func (m *ExpandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpandRequest.Marshal(b, m, deterministic)
}
func (m *ExpandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpandRequest.Merge(m, src)
}
func (m *ExpandRequest) XXX_Size() int {
	return xxx_messageInfo_ExpandRequest.Size(m)
}
func (m *ExpandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExpandRequest proto.InternalMessageInfo

func (m *ExpandRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ExpandRequest) GetError() *status.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// The request for the PagedExpand method.
type PagedExpandRequest struct {
	// The string to expand.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// The amount of words to returned in each page.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The position of the page to be returned.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PagedExpandRequest) Reset()         { *m = PagedExpandRequest{} }
func (m *PagedExpandRequest) String() string { return proto.CompactTextString(m) }
func (*PagedExpandRequest) ProtoMessage()    {}
func (*PagedExpandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4be78b9cf935ae, []int{3}
}

func (m *PagedExpandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PagedExpandRequest.Unmarshal(m, b)
}
func (m *PagedExpandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PagedExpandRequest.Marshal(b, m, deterministic)
}
func (m *PagedExpandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PagedExpandRequest.Merge(m, src)
}
func (m *PagedExpandRequest) XXX_Size() int {
	return xxx_messageInfo_PagedExpandRequest.Size(m)
}
func (m *PagedExpandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PagedExpandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PagedExpandRequest proto.InternalMessageInfo

func (m *PagedExpandRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *PagedExpandRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PagedExpandRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// The response for the PagedExpand method.
type PagedExpandResponse struct {
	// The words that were expanded.
	Responses []*EchoResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	// The next page token.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PagedExpandResponse) Reset()         { *m = PagedExpandResponse{} }
func (m *PagedExpandResponse) String() string { return proto.CompactTextString(m) }
func (*PagedExpandResponse) ProtoMessage()    {}
func (*PagedExpandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4be78b9cf935ae, []int{4}
}

func (m *PagedExpandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PagedExpandResponse.Unmarshal(m, b)
}
func (m *PagedExpandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PagedExpandResponse.Marshal(b, m, deterministic)
}
func (m *PagedExpandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PagedExpandResponse.Merge(m, src)
}
func (m *PagedExpandResponse) XXX_Size() int {
	return xxx_messageInfo_PagedExpandResponse.Size(m)
}
func (m *PagedExpandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PagedExpandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PagedExpandResponse proto.InternalMessageInfo

func (m *PagedExpandResponse) GetResponses() []*EchoResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *PagedExpandResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// The request for Wait method.
type WaitRequest struct {
	// Types that are valid to be assigned to End:
	//	*WaitRequest_EndTime
	//	*WaitRequest_Ttl
	End isWaitRequest_End `protobuf_oneof:"end"`
	// Types that are valid to be assigned to Response:
	//	*WaitRequest_Error
	//	*WaitRequest_Success
	Response             isWaitRequest_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *WaitRequest) Reset()         { *m = WaitRequest{} }
func (m *WaitRequest) String() string { return proto.CompactTextString(m) }
func (*WaitRequest) ProtoMessage()    {}
func (*WaitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4be78b9cf935ae, []int{5}
}

func (m *WaitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitRequest.Unmarshal(m, b)
}
func (m *WaitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitRequest.Marshal(b, m, deterministic)
}
func (m *WaitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitRequest.Merge(m, src)
}
func (m *WaitRequest) XXX_Size() int {
	return xxx_messageInfo_WaitRequest.Size(m)
}
func (m *WaitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitRequest proto.InternalMessageInfo

type isWaitRequest_End interface {
	isWaitRequest_End()
}

type WaitRequest_EndTime struct {
	EndTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3,oneof"`
}

type WaitRequest_Ttl struct {
	Ttl *duration.Duration `protobuf:"bytes,4,opt,name=ttl,proto3,oneof"`
}

func (*WaitRequest_EndTime) isWaitRequest_End() {}

func (*WaitRequest_Ttl) isWaitRequest_End() {}

func (m *WaitRequest) GetEnd() isWaitRequest_End {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *WaitRequest) GetEndTime() *timestamp.Timestamp {
	if x, ok := m.GetEnd().(*WaitRequest_EndTime); ok {
		return x.EndTime
	}
	return nil
}

func (m *WaitRequest) GetTtl() *duration.Duration {
	if x, ok := m.GetEnd().(*WaitRequest_Ttl); ok {
		return x.Ttl
	}
	return nil
}

type isWaitRequest_Response interface {
	isWaitRequest_Response()
}

type WaitRequest_Error struct {
	Error *status.Status `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type WaitRequest_Success struct {
	Success *WaitResponse `protobuf:"bytes,3,opt,name=success,proto3,oneof"`
}

func (*WaitRequest_Error) isWaitRequest_Response() {}

func (*WaitRequest_Success) isWaitRequest_Response() {}

func (m *WaitRequest) GetResponse() isWaitRequest_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *WaitRequest) GetError() *status.Status {
	if x, ok := m.GetResponse().(*WaitRequest_Error); ok {
		return x.Error
	}
	return nil
}

func (m *WaitRequest) GetSuccess() *WaitResponse {
	if x, ok := m.GetResponse().(*WaitRequest_Success); ok {
		return x.Success
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WaitRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WaitRequest_EndTime)(nil),
		(*WaitRequest_Ttl)(nil),
		(*WaitRequest_Error)(nil),
		(*WaitRequest_Success)(nil),
	}
}

// The result of the Wait operation.
type WaitResponse struct {
	// This content of the result.
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitResponse) Reset()         { *m = WaitResponse{} }
func (m *WaitResponse) String() string { return proto.CompactTextString(m) }
func (*WaitResponse) ProtoMessage()    {}
func (*WaitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4be78b9cf935ae, []int{6}
}

func (m *WaitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitResponse.Unmarshal(m, b)
}
func (m *WaitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitResponse.Marshal(b, m, deterministic)
}
func (m *WaitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitResponse.Merge(m, src)
}
func (m *WaitResponse) XXX_Size() int {
	return xxx_messageInfo_WaitResponse.Size(m)
}
func (m *WaitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitResponse proto.InternalMessageInfo

func (m *WaitResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// The metadata for Wait operation.
type WaitMetadata struct {
	// The time that this operation will complete.
	EndTime              *timestamp.Timestamp `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *WaitMetadata) Reset()         { *m = WaitMetadata{} }
func (m *WaitMetadata) String() string { return proto.CompactTextString(m) }
func (*WaitMetadata) ProtoMessage()    {}
func (*WaitMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4be78b9cf935ae, []int{7}
}

func (m *WaitMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitMetadata.Unmarshal(m, b)
}
func (m *WaitMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitMetadata.Marshal(b, m, deterministic)
}
func (m *WaitMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitMetadata.Merge(m, src)
}
func (m *WaitMetadata) XXX_Size() int {
	return xxx_messageInfo_WaitMetadata.Size(m)
}
func (m *WaitMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_WaitMetadata proto.InternalMessageInfo

func (m *WaitMetadata) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "google.showcase.v1alpha3.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "google.showcase.v1alpha3.EchoResponse")
	proto.RegisterType((*ExpandRequest)(nil), "google.showcase.v1alpha3.ExpandRequest")
	proto.RegisterType((*PagedExpandRequest)(nil), "google.showcase.v1alpha3.PagedExpandRequest")
	proto.RegisterType((*PagedExpandResponse)(nil), "google.showcase.v1alpha3.PagedExpandResponse")
	proto.RegisterType((*WaitRequest)(nil), "google.showcase.v1alpha3.WaitRequest")
	proto.RegisterType((*WaitResponse)(nil), "google.showcase.v1alpha3.WaitResponse")
	proto.RegisterType((*WaitMetadata)(nil), "google.showcase.v1alpha3.WaitMetadata")
}

func init() {
	proto.RegisterFile("google/showcase/v1alpha3/echo.proto", fileDescriptor_1c4be78b9cf935ae)
}

var fileDescriptor_1c4be78b9cf935ae = []byte{
	// 767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0x9e, 0xdb, 0xee, 0x9f, 0xfb, 0xdb, 0x0f, 0xe1, 0x09, 0x08, 0xd9, 0x5f, 0x82, 0x36, 0xaa,
	0x6a, 0x4b, 0x46, 0x37, 0x98, 0xa8, 0xc4, 0xa1, 0xdd, 0x26, 0xf5, 0x82, 0x98, 0xba, 0x09, 0x04,
	0x97, 0xca, 0x4b, 0xbc, 0x24, 0x22, 0xb5, 0x43, 0xec, 0x6c, 0xd3, 0x24, 0x2e, 0x70, 0x44, 0x1c,
	0x10, 0x57, 0x3e, 0xd1, 0xae, 0xdc, 0x38, 0x71, 0xe0, 0x43, 0x70, 0x44, 0x71, 0x92, 0x2e, 0xcd,
	0xd4, 0xae, 0x48, 0xbb, 0xb4, 0x8a, 0xfd, 0xbc, 0xef, 0xf3, 0xbc, 0xef, 0xfb, 0xd8, 0x86, 0x0f,
	0x6d, 0xc6, 0x6c, 0x8f, 0x18, 0xdc, 0x61, 0xa7, 0x26, 0xe6, 0xc4, 0x38, 0x79, 0x8c, 0x3d, 0xdf,
	0xc1, 0x9b, 0x06, 0x31, 0x1d, 0xa6, 0xfb, 0x01, 0x13, 0x0c, 0x29, 0x31, 0x48, 0x4f, 0x41, 0x7a,
	0x0a, 0x52, 0xe7, 0x93, 0x70, 0xec, 0xbb, 0x06, 0xa6, 0x94, 0x09, 0x2c, 0x5c, 0x46, 0x79, 0x1c,
	0xa7, 0xde, 0xcb, 0xec, 0x9a, 0x9e, 0x4b, 0xa8, 0x48, 0x36, 0x96, 0x32, 0x1b, 0xc7, 0x2e, 0xf1,
	0xac, 0xce, 0x11, 0x71, 0xf0, 0x89, 0xcb, 0x82, 0x04, 0x90, 0xca, 0xf2, 0x18, 0xb5, 0x83, 0x90,
	0x52, 0x97, 0xda, 0x06, 0xf3, 0x49, 0xd0, 0x97, 0x7e, 0x31, 0x01, 0xc9, 0xaf, 0xa3, 0xf0, 0xd8,
	0xb0, 0xc2, 0x18, 0x90, 0x63, 0xe9, 0xed, 0x0b, 0xb7, 0x4b, 0xb8, 0xc0, 0x5d, 0x3f, 0xa7, 0x2f,
	0xf0, 0x4d, 0x83, 0x0b, 0x2c, 0xc2, 0x24, 0xb3, 0x86, 0x61, 0x79, 0xcf, 0x74, 0x58, 0x9b, 0xbc,
	0x0f, 0x09, 0x17, 0x48, 0x85, 0x93, 0x26, 0xa3, 0x82, 0x50, 0xa1, 0x80, 0x65, 0x50, 0x99, 0x6e,
	0x8d, 0xb5, 0xd3, 0x05, 0x54, 0x85, 0xe3, 0x24, 0x08, 0x58, 0xa0, 0x14, 0x96, 0x41, 0xa5, 0x5c,
	0x43, 0x7a, 0xd2, 0xab, 0xc0, 0x37, 0xf5, 0x03, 0x99, 0xb3, 0x35, 0xd6, 0x8e, 0x21, 0x4d, 0x08,
	0xa7, 0x02, 0xc2, 0x7d, 0x46, 0x39, 0xd1, 0x2a, 0xf0, 0xbf, 0x98, 0x22, 0xfe, 0x46, 0x4a, 0x8e,
	0xa3, 0xc7, 0xa0, 0x1d, 0xc0, 0x99, 0xbd, 0x33, 0x1f, 0x53, 0x2b, 0x95, 0x33, 0x10, 0x8a, 0x2a,
	0xd7, 0x8a, 0x49, 0xa4, 0x68, 0x0c, 0xa2, 0x7d, 0x6c, 0x13, 0xab, 0x3f, 0xf3, 0x42, 0x2e, 0x73,
	0xb3, 0xf8, 0xab, 0x51, 0xb8, 0x4c, 0x3f, 0x07, 0xa7, 0x7d, 0x6c, 0x93, 0x0e, 0x77, 0xcf, 0x89,
	0xa4, 0x18, 0x6f, 0x4f, 0x45, 0x0b, 0x07, 0xee, 0x39, 0x41, 0x0b, 0x10, 0xca, 0x4d, 0xc1, 0xde,
	0x11, 0xaa, 0x14, 0xa5, 0x30, 0x09, 0x3f, 0x8c, 0x16, 0xb4, 0x4f, 0x00, 0xce, 0xf6, 0x31, 0x26,
	0x75, 0xef, 0xc2, 0xe9, 0xb4, 0x27, 0x5c, 0x01, 0xcb, 0xc5, 0x4a, 0xb9, 0xb6, 0xaa, 0x0f, 0xf2,
	0x9b, 0x9e, 0x6d, 0x59, 0xfb, 0x32, 0x10, 0xad, 0xc2, 0x5b, 0x94, 0x9c, 0x89, 0x4e, 0x46, 0x41,
	0x41, 0x2a, 0x98, 0x89, 0x96, 0xf7, 0x7b, 0x2a, 0xfe, 0x00, 0x58, 0x7e, 0x8d, 0x5d, 0x91, 0x16,
	0xbc, 0x0d, 0xa7, 0x08, 0xb5, 0x3a, 0x91, 0x31, 0x64, 0xc5, 0xe5, 0x9a, 0x9a, 0x92, 0xa7, 0xae,
	0xd1, 0x0f, 0x53, 0xd7, 0x44, 0x63, 0x27, 0xd4, 0x8a, 0xbe, 0xd1, 0x3a, 0x2c, 0x0a, 0xe1, 0x29,
	0x25, 0x19, 0x73, 0xff, 0x4a, 0xcc, 0x6e, 0xe2, 0xc4, 0xd6, 0x58, 0x3b, 0xc2, 0x8d, 0xe2, 0x12,
	0x90, 0x8c, 0x06, 0x35, 0xe1, 0x24, 0x0f, 0x4d, 0x93, 0x70, 0x2e, 0xbb, 0x38, 0xb4, 0x1f, 0x71,
	0x2d, 0x71, 0x17, 0x5a, 0xa0, 0x9d, 0x06, 0x36, 0xc7, 0x61, 0x91, 0x50, 0x2b, 0x6f, 0xb8, 0x2c,
	0x7a, 0x88, 0xe1, 0xf6, 0x62, 0xe4, 0x0b, 0x22, 0xb0, 0x85, 0x05, 0x46, 0x4f, 0xfe, 0xa5, 0x49,
	0xbd, 0x16, 0xd5, 0xbe, 0x4f, 0xc0, 0x52, 0x34, 0x2f, 0x14, 0x26, 0xff, 0x2b, 0xd7, 0xcd, 0x55,
	0xce, 0x44, 0x1d, 0x71, 0xfc, 0xda, 0xe2, 0xc7, 0x1f, 0xbf, 0xbf, 0x15, 0x14, 0x6d, 0xb6, 0xff,
	0xce, 0xaa, 0xcb, 0x1f, 0x50, 0x45, 0x5f, 0x00, 0x9c, 0x88, 0xcd, 0x86, 0x1e, 0x0d, 0x49, 0x99,
	0x3d, 0x00, 0x23, 0x73, 0x6f, 0xfc, 0x6c, 0xcc, 0x24, 0xed, 0x5a, 0x93, 0x53, 0x93, 0x5a, 0x54,
	0xed, 0x4e, 0x5e, 0x8b, 0xcc, 0x5e, 0x07, 0xd5, 0x0d, 0x80, 0x3e, 0xc0, 0xc9, 0x1d, 0xe6, 0x79,
	0xc4, 0x14, 0x37, 0xdd, 0x89, 0x07, 0x92, 0x7d, 0x4e, 0xbb, 0x9b, 0x63, 0x37, 0x63, 0xba, 0x3a,
	0xa8, 0x56, 0x00, 0x7a, 0x03, 0x4b, 0x3b, 0x0e, 0xbe, 0x69, 0xee, 0x0a, 0xd8, 0x00, 0xe8, 0x2b,
	0x80, 0xe5, 0xcc, 0xd9, 0x46, 0x6b, 0x83, 0x63, 0xaf, 0x5e, 0x3a, 0xea, 0xfa, 0x88, 0xe8, 0xa4,
	0xd8, 0x15, 0x59, 0xec, 0x92, 0xa6, 0xe6, 0x8a, 0xf5, 0x2f, 0xb1, 0xd1, 0xf4, 0x3f, 0x03, 0x58,
	0x8a, 0x5c, 0x3c, 0xac, 0xde, 0xcc, 0x4d, 0xa0, 0x2e, 0xa4, 0xb0, 0xcc, 0x93, 0xa3, 0xbf, 0x4c,
	0x9f, 0x1c, 0xed, 0xf9, 0x45, 0x63, 0x3e, 0x77, 0x80, 0xfa, 0x0e, 0xc9, 0x00, 0x2f, 0x9e, 0x62,
	0x37, 0x6a, 0xbf, 0x7a, 0xfb, 0xa2, 0xf1, 0xbf, 0xc7, 0x4c, 0xec, 0x39, 0x8c, 0x8b, 0xfa, 0xf6,
	0xd6, 0xd3, 0x67, 0xcd, 0x57, 0x70, 0xde, 0x64, 0xdd, 0x81, 0xe2, 0xf6, 0xc1, 0xdb, 0x2d, 0xdb,
	0x15, 0x4e, 0x78, 0xa4, 0x9b, 0xac, 0x6b, 0xc4, 0x30, 0xec, 0xbb, 0xdc, 0xb0, 0xb1, 0xef, 0x9a,
	0xeb, 0xbd, 0x07, 0x9b, 0x93, 0xe0, 0x84, 0x04, 0x86, 0x4d, 0x68, 0x7c, 0x18, 0x27, 0xe4, 0xdf,
	0xe6, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xd1, 0x85, 0xd2, 0xda, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	// This method simply echos the request. This method is showcases unary rpcs.
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// This method split the given content into words and will pass each word back
	// through the stream. This method showcases server-side streaming rpcs.
	Expand(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (Echo_ExpandClient, error)
	// This method will collect the words given to it. When the stream is closed
	// by the client, this method will return the a concatenation of the strings
	// passed to it. This method showcases client-side streaming rpcs.
	Collect(ctx context.Context, opts ...grpc.CallOption) (Echo_CollectClient, error)
	// This method, upon receiving a request on the stream, the same content will
	// be passed  back on the stream. This method showcases bidirectional
	// streaming rpcs.
	Chat(ctx context.Context, opts ...grpc.CallOption) (Echo_ChatClient, error)
	// This is similar to the Expand method but instead of returning a stream of
	// expanded words, this method returns a paged list of expanded words.
	PagedExpand(ctx context.Context, in *PagedExpandRequest, opts ...grpc.CallOption) (*PagedExpandResponse, error)
	// This method will wait the requested amount of and then return.
	// This method showcases how a client handles a request timing out.
	Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1alpha3.Echo/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) Expand(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (Echo_ExpandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Echo_serviceDesc.Streams[0], "/google.showcase.v1alpha3.Echo/Expand", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoExpandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Echo_ExpandClient interface {
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoExpandClient struct {
	grpc.ClientStream
}

func (x *echoExpandClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoClient) Collect(ctx context.Context, opts ...grpc.CallOption) (Echo_CollectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Echo_serviceDesc.Streams[1], "/google.showcase.v1alpha3.Echo/Collect", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoCollectClient{stream}
	return x, nil
}

type Echo_CollectClient interface {
	Send(*EchoRequest) error
	CloseAndRecv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoCollectClient struct {
	grpc.ClientStream
}

func (x *echoCollectClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoCollectClient) CloseAndRecv() (*EchoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Echo_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Echo_serviceDesc.Streams[2], "/google.showcase.v1alpha3.Echo/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoChatClient{stream}
	return x, nil
}

type Echo_ChatClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoChatClient struct {
	grpc.ClientStream
}

func (x *echoChatClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoChatClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoClient) PagedExpand(ctx context.Context, in *PagedExpandRequest, opts ...grpc.CallOption) (*PagedExpandResponse, error) {
	out := new(PagedExpandResponse)
	err := c.cc.Invoke(ctx, "/google.showcase.v1alpha3.Echo/PagedExpand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.showcase.v1alpha3.Echo/Wait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	// This method simply echos the request. This method is showcases unary rpcs.
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// This method split the given content into words and will pass each word back
	// through the stream. This method showcases server-side streaming rpcs.
	Expand(*ExpandRequest, Echo_ExpandServer) error
	// This method will collect the words given to it. When the stream is closed
	// by the client, this method will return the a concatenation of the strings
	// passed to it. This method showcases client-side streaming rpcs.
	Collect(Echo_CollectServer) error
	// This method, upon receiving a request on the stream, the same content will
	// be passed  back on the stream. This method showcases bidirectional
	// streaming rpcs.
	Chat(Echo_ChatServer) error
	// This is similar to the Expand method but instead of returning a stream of
	// expanded words, this method returns a paged list of expanded words.
	PagedExpand(context.Context, *PagedExpandRequest) (*PagedExpandResponse, error)
	// This method will wait the requested amount of and then return.
	// This method showcases how a client handles a request timing out.
	Wait(context.Context, *WaitRequest) (*longrunning.Operation, error)
}

// UnimplementedEchoServer can be embedded to have forward compatible implementations.
type UnimplementedEchoServer struct {
}

func (*UnimplementedEchoServer) Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedEchoServer) Expand(req *ExpandRequest, srv Echo_ExpandServer) error {
	return status1.Errorf(codes.Unimplemented, "method Expand not implemented")
}
func (*UnimplementedEchoServer) Collect(srv Echo_CollectServer) error {
	return status1.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (*UnimplementedEchoServer) Chat(srv Echo_ChatServer) error {
	return status1.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (*UnimplementedEchoServer) PagedExpand(ctx context.Context, req *PagedExpandRequest) (*PagedExpandResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PagedExpand not implemented")
}
func (*UnimplementedEchoServer) Wait(ctx context.Context, req *WaitRequest) (*longrunning.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Wait not implemented")
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1alpha3.Echo/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_Expand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExpandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServer).Expand(m, &echoExpandServer{stream})
}

type Echo_ExpandServer interface {
	Send(*EchoResponse) error
	grpc.ServerStream
}

type echoExpandServer struct {
	grpc.ServerStream
}

func (x *echoExpandServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Echo_Collect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServer).Collect(&echoCollectServer{stream})
}

type Echo_CollectServer interface {
	SendAndClose(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoCollectServer struct {
	grpc.ServerStream
}

func (x *echoCollectServer) SendAndClose(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoCollectServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Echo_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServer).Chat(&echoChatServer{stream})
}

type Echo_ChatServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoChatServer struct {
	grpc.ServerStream
}

func (x *echoChatServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoChatServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Echo_PagedExpand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagedExpandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).PagedExpand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1alpha3.Echo/PagedExpand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).PagedExpand(ctx, req.(*PagedExpandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.showcase.v1alpha3.Echo/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Wait(ctx, req.(*WaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.showcase.v1alpha3.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Echo_Echo_Handler,
		},
		{
			MethodName: "PagedExpand",
			Handler:    _Echo_PagedExpand_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _Echo_Wait_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Expand",
			Handler:       _Echo_Expand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Collect",
			Handler:       _Echo_Collect_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _Echo_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "google/showcase/v1alpha3/echo.proto",
}
